<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Again Unscarred</title>
  
  <subtitle>别来无恙，欢迎来到我的blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-04T07:08:44.218Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>CharliChen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World1</title>
    <link href="http://yoursite.com/2018/08/21/hello-world/"/>
    <id>http://yoursite.com/2018/08/21/hello-world/</id>
    <published>2018-08-21T14:20:15.000Z</published>
    <updated>2019-03-04T07:08:44.218Z</updated>
    
    <content type="html"><![CDATA[<hr><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://
      
    
    </summary>
    
      <category term="测试开发" scheme="http://yoursite.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>天空之城</title>
    <link href="http://yoursite.com/2018/08/21/%E5%A4%A9%E7%A9%BA%E4%B9%8B%E5%9F%8E/"/>
    <id>http://yoursite.com/2018/08/21/天空之城/</id>
    <published>2018-08-21T14:20:15.000Z</published>
    <updated>2018-05-05T11:07:08.547Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=26508186&auto=1&height=66"></iframe><hr><blockquote><p>飞机飞过天空，天空之城<br>落雨下的黄昏的我们<br>此刻我在异乡的夜里<br>感觉着你忽明忽暗</p><p>我想回到过去，沉默着欢喜<br>天空之城在哭泣，越来越明亮的你<br>爱情不过是生活的屁<br>折磨着我也折磨着你</p><p>港岛妹妹，你献给我的西班牙馅饼<br>甜蜜地融化了我，天空之城在哭泣<br>港岛妹妹，我们曾拥有的甜蜜的爱情<br>疯狂地撕裂了我，天空之城在哭泣</p><p>港岛妹妹，你献给我的西班牙馅饼<br>甜蜜地融化了我，天空之城在哭泣<br>港岛妹妹，我们曾拥有的甜蜜的爱情<br>疯狂地撕裂了我，天空之城在哭泣<br>港岛妹妹，你献给我的西班牙馅饼<br>甜蜜地融化了我，天空之城在哭泣<br>港岛妹妹，我们曾拥有的甜蜜的爱情<br>疯狂地撕裂了我，天空之城在哭泣</p><p>有人路过那里，回来告诉我<br>天空之城在哭泣，无法呼吸的你<br>此刻我在异乡的夜里<br>想念着你越来越远</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=
      
    
    </summary>
    
      <category term="记录" scheme="http://yoursite.com/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="life" scheme="http://yoursite.com/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>Smartphone--Android真机管理平台</title>
    <link href="http://yoursite.com/2017/02/10/Smartphone--Android%E7%9C%9F%E6%9C%BA%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/"/>
    <id>http://yoursite.com/2017/02/10/Smartphone--Android真机管理平台/</id>
    <published>2017-02-10T12:32:30.000Z</published>
    <updated>2018-05-01T12:28:22.997Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文为CharliChen原创文章，转载请注明出处！！</p></blockquote><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a><strong>背景</strong></h2><p>最近在工作中发现几个问题：</p><ul><li>作为测试人员，在做产品兼容性测试时，发现手上的测试设备总是不够用，但是可能其他同事的设备在闲置着；</li><li>作为Android和H5开发人员，如果测试同事发现一个兼容性的bug，要想还原场景，还要把测试设备给开发（如果不在一个楼层，还要来回跑）</li><li>作为产品和运营人员，为了体验产品，也要去申请测试设备，但是大部分时间，设备是闲置的。</li></ul><p>在这样一个背景下，我在想有没有一个平台，可以把整个公司的线下Android测试设备，通过Web端进行线上远程管理控制，类似于模拟器（当然它是真机），在你的本地电脑进行操作，这样不仅能充分利用测试设备，而且还节省公司购买测试设备的开支。<br>基于这个理念，我大量查阅google，baidu，发现真的老外已经开发好了这样一个平台，而且还开源啦。<br>官方主页：<a href="https://openstf.github.io/" target="_blank" rel="noopener">https://openstf.github.io/</a><br>github地址：<a href="https://github.com/openstf/stf" target="_blank" rel="noopener">https://github.com/openstf/stf</a> </p><p><strong>该平台可以把整个公司的线下Android设备集合在一起，通过Web端进行线上远程管理控制，在你的本地电脑进行操作，不仅提高测试设备的利用率，还节省公司购买测试设备的开支。</strong></p><p>展示下官网的效果图：<br><img src="http://img.blog.csdn.net/20161010155531455" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20161009235629811" alt="这里写图片描述"></p><hr><h2 id="平台优点："><a href="#平台优点：" class="headerlink" title="平台优点："></a>平台优点：</h2><ul><li>大大提高线下设备的利用率，节省公司购买测试设备的开支</li><li>线下真机能做的，它都可以做，包括在线拍照，截图</li><li>可以进行远程调试</li></ul><h2 id="适用人群："><a href="#适用人群：" class="headerlink" title="适用人群："></a>适用人群：</h2><p>测试工程师<br>                  Android工程师          （真机调试）<br>                  前端H5开发工程师  （真机调试）<br>                  产品和运营               （产品体验）</p><hr><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a><strong>环境搭建</strong></h2><p>由于本人的办公电脑是Mac，现在就基于Mac OS X系统搭建环境（Linux环境和Windows环境应该类似）</p><h3 id="1-JDK和Android-SDK环境安装"><a href="#1-JDK和Android-SDK环境安装" class="headerlink" title="1. JDK和Android SDK环境安装"></a>1. JDK和Android SDK环境安装</h3><p>JDK下载：<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a><br>SDK下载：<a href="https://developer.android.com/studio/index.html" target="_blank" rel="noopener">https://developer.android.com/studio/index.html</a></p><p>配置环境变量并保存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_45.jdk/Contents/Home </span><br><span class="line">export ANDROID_HOME=/Users/CharlieChen/Library/Android/sdk</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/tools</span><br></pre></td></tr></table></figure><h3 id="2-nodejs安装"><a href="#2-nodejs安装" class="headerlink" title="2. nodejs安装"></a>2. nodejs安装</h3><p>因为该平台是通过nodejs语言写的，所以必须安装nodejs的运行环境。<br>在<a href="https://nodejs.org/download/" target="_blank" rel="noopener">https://nodejs.org/download/</a> 下载nodejs安装包，解压并控制台进入目录安装</p><h3 id="2-安装Bower"><a href="#2-安装Bower" class="headerlink" title="2. 安装Bower"></a>2. 安装Bower</h3><p>控制台执行npm命令进行Bower安装并等待完成<br>npm install bower -g<br>验证安装是否成功：bower -v  如果可以显示版本号 证明成功</p><h3 id="3-安装RethinkDB"><a href="#3-安装RethinkDB" class="headerlink" title="3. 安装RethinkDB"></a>3. 安装RethinkDB</h3><p>rethinkDB为平台的数据库，存储的用户和设备的信息，可能大家只对Mysql 或mangoDB熟悉，但这没关系，先安装再说，至于原理后面有时间再去了解。<br>先下载rethinkdb安装包：<a href="http://download.rethinkdb.com/osx/" target="_blank" rel="noopener">http://download.rethinkdb.com/osx/</a><br>双击rethinkdb-2.0.4.dmg  安装.pkg包即可<br> 验证安装是否成功：rethinkdb -version  如果可以显示版本号 证明成功</p><h3 id="4-安装GraphicsMagick"><a href="#4-安装GraphicsMagick" class="headerlink" title="4. 安装GraphicsMagick"></a>4. 安装GraphicsMagick</h3><p>brew install graphicsmagick</p><p>如果发现brew命令不可用，说明你的电脑没有装brew的环境，装一下就可以啦</p><h3 id="5-安装libsodium-zeromq的依赖"><a href="#5-安装libsodium-zeromq的依赖" class="headerlink" title="5. 安装libsodium(zeromq的依赖)"></a>5. 安装libsodium(zeromq的依赖)</h3><p> brew install libsodium</p><h3 id="6-安装zeromq"><a href="#6-安装zeromq" class="headerlink" title="6. 安装zeromq"></a>6. 安装zeromq</h3><p>brew install zmq</p><h3 id="7-安装protobuf"><a href="#7-安装protobuf" class="headerlink" title="7. 安装protobuf"></a>7. 安装protobuf</h3><p>brew install protobuf</p><h3 id="8-安装pkg-config"><a href="#8-安装pkg-config" class="headerlink" title="8. 安装pkg-config"></a>8. 安装pkg-config</h3><p>brew install pkgconfig</p><p>修改环境变量：<br>添加如下信息：<br>export PATH=$PATH:/usr/local/Cellar/protobuf/2.6.1/bin/   （请以本地下载路径为准）<br>export PKG_CONFIG_PATH=/usr/local/Cellar/protobuf/2.6.1/lib/pkgconfig/     （请以本地下载路径为准）</p><h3 id="9-安装stf"><a href="#9-安装stf" class="headerlink" title="9. 安装stf"></a>9. 安装stf</h3><p>sudo npm install -g stf</p><hr><h2 id="Smartphone服务端运行"><a href="#Smartphone服务端运行" class="headerlink" title="Smartphone服务端运行"></a><strong>Smartphone服务端运行</strong></h2><h3 id="1-启动rethinkDB"><a href="#1-启动rethinkDB" class="headerlink" title="1. 启动rethinkDB"></a>1. 启动rethinkDB</h3><p>安装完成后，打开单独的控制台，运行命令等待服务启动完成：<br>rethinkdb<br><img src="http://img.blog.csdn.net/20161010162215350" alt="这里写图片描述"></p><h3 id="2-启动stf服务端"><a href="#2-启动stf服务端" class="headerlink" title="2. 启动stf服务端"></a>2. 启动stf服务端</h3><p>打开一个单独的控制台，运行命令等待服务启动完成：<br>stf local<br>如果要远程登录平台的话，需要增加本地服务器的ip地址<br>stf local –public-ip 本机IP<br><img src="http://img.blog.csdn.net/20161010162232350" alt="这里写图片描述"></p><hr><h2 id="Smartphone客户端运行"><a href="#Smartphone客户端运行" class="headerlink" title="Smartphone客户端运行"></a><strong>Smartphone客户端运行</strong></h2><p>在浏览器中输入地址：http://本机ip:7100/ 访问客户端。<br>输入用户名和邮箱登录即可开始使用。<br>登录界面：<br><img src="http://img.blog.csdn.net/20161010163424241" alt="这里写图片描述"></p><p>设备列表界面：<br><img src="http://img.blog.csdn.net/20161010163813800" alt="这里写图片描述"></p><p>设备使用界面：<br><img src="http://img.blog.csdn.net/20161010163925223" alt="这里写图片描述"></p><hr><h2 id="Smartphone二次改造"><a href="#Smartphone二次改造" class="headerlink" title="Smartphone二次改造"></a><strong>Smartphone二次改造</strong></h2><p>你可以根据公司的需求，进行Smartphone平台的二次开发。可能大家发现了我的平台登录界面换成了我公司的logo，设备使用界面，增加了shell脚本和远程调试等等。。<br>这个就不一一讲了，后面有时间再设一个专题详细讲解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文为CharliChen原创文章，转载请注明出处！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;&lt;strong&gt;背景&lt;/strong
      
    
    </summary>
    
      <category term="测试开发" scheme="http://yoursite.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="专项测试" scheme="http://yoursite.com/tags/%E4%B8%93%E9%A1%B9%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Android稳定性测试-- Monkey二次开发</title>
    <link href="http://yoursite.com/2017/01/01/Android%E7%A8%B3%E5%AE%9A%E6%80%A7%E6%B5%8B%E8%AF%95--%20Monkey%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/2017/01/01/Android稳定性测试-- Monkey二次开发/</id>
    <published>2017-01-01T05:41:52.000Z</published>
    <updated>2018-05-01T12:25:47.950Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文为CharliChen原创文章，转载请注明出处！！</p></blockquote><h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>前面一遍blog <a href="http://blog.csdn.net/tobetheender/article/details/53448949" target="_blank" rel="noopener">Monkey源码分析</a>讲到Monkey的代码结构和代码执行流程，相信通过介绍大家应该对monkey的运行原理和核心逻辑有了很深刻的了解。我们做的这一切都是为了更好的了解monkey的内部逻辑进行二次开发。<br>为什么要二次开发前面的文章也大概说了，它毕竟是一款为稳定性测试而准备的小工具，所以存在很多局限性：</p><ul><li>Monkey不提供<strong>截屏功能</strong>，因此测试很难找到问题复现的场景；</li><li>Monkey无法进行<strong>控件识别</strong>，对事件流控制能力很微弱；</li><li>执行过程中容易误点工具栏导致Wi-Fi关闭，影响测试效果；等等。</li></ul><p>本节重点介绍的就是如何通过Monkey源码改造的方法来解决上述问题，以更好地提升Monkey的使用效果。<br>1.保持随机<br>2.尽可能让其他控件有相同机会<br>3.尽可能操作有意义的控件<br>4.尽可能覆盖到每个Activity </p><h1 id="Monkey代码重编译"><a href="#Monkey代码重编译" class="headerlink" title="Monkey代码重编译"></a>Monkey代码重编译</h1><p>monkey.jar的源码位于Android源码的<br>\development\cmds\monkey\src\com\android\commands\monkey 目录下，如图所示<br><img src="http://img.blog.csdn.net/20170123143738307?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvVG9CZVRoZUVuZGVy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><hr><p><strong>Monkey重编译的方法有两种:</strong></p><ul><li>一种是在Linux环境下编译</li><li>另一种是在Windows环境下编译</li></ul><p>因为在Windows环境下编译更为常见，所以这里会重点介绍第二种方法。</p><h2 id="Linux环境下编译"><a href="#Linux环境下编译" class="headerlink" title="Linux环境下编译"></a>Linux环境下编译</h2><p>在Linux环境下，下载要测试Android系统版本对应的全部源代码，进入源码目录。</p><ul><li>执行.build/envsetup.sh，设置Android的编译环境</li><li>执行make monkey开始编译Monkey</li><li>编译成功后，可在/out/target/product/generic/system/framework/中获取Monkey.jar包。</li></ul><h2 id="Windows环境下编译"><a href="#Windows环境下编译" class="headerlink" title="Windows环境下编译"></a>Windows环境下编译</h2><p>Windows环境下的编译要稍微复杂一点。</p><ul><li>创建Monkey项目。同样也是需要下载要测试Android系统版本对应的全部源代码，在/development/cmds/monkey目录下找到Monkey的工程源码。在Eclipse中新建一个Java工程，把Monkey源码导入进去</li><li>设置Java Build Path。选中对应项目，在顶部菜单栏依次选题Project→Properties→Jave Build Path→Libraries，添加两个jar文件：android.jar和framework.jar。</li></ul><p>其中android.jar可以从Android Sdk中platforms\android-X\目录下获取；framework.jar可以通过以下两种方式获取。<br>（1）（推荐）从在Linux环境下Android源码根目录执行make update-api编译生成，如截图中的classes_dex2jar.jar文件就是通过Android源码编译生成的。<br>（2）直接从Android手机上/system/framework目录下获取已经编译好的framework.jar文件，把这个framework.jar解压，取出其dex，然后把它的dex通过dex2jar工具转换为jar包，导入工程。添加android和framework的jar包后，还需要将framework的jar包顺序调整到顶部，如图所示：<br><img src="http://img.blog.csdn.net/20170123144756497?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvVG9CZVRoZUVuZGVy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><ul><li><p>编译生成jar包。选择Monkey项目，单击右键→单击Export→选择输出的Jar包类型为“JAR file”类，单击“Next”按钮；选择对应的构建工程，填写jar包输出路径，单击“Next”按钮；进入打包选项页面，这里用默认选项即可，直接单击“Next”按钮；<br>选择工程中main函数所在的类，单击“Finish”按钮；编译完成后，在指定目录下就会生成对应的Monkey.jar包了。</p></li><li><p>转换Monkey.jar包。Eclipse编译出来的jar包是不能直接放到Android手机上运行的，在Android上无法像Java中那样方便地动态加载jar。原因是：Android的虚拟机（Dalvik VM）是不能识别Java打出的jar的byte code的，这里需要通过Android sdk中的dx工具来优化转换成Dalvik byte code才行。</p></li></ul><p>将打包好的jar复制到SDK安装目录android-sdk-windows\platform-tools下，打开命令行进入platform-tools目录，执行命令：<br>dx –dex –output=&lt;生成的目标文件&gt;  &lt;要转换的文件&gt;</p><h2 id="重编译的包运行方法"><a href="#重编译的包运行方法" class="headerlink" title="重编译的包运行方法"></a>重编译的包运行方法</h2><p>要运行重编译后的Monkey.jar有以下两个前提条件。<br>·手机拥有root权限。<br>·手机Android版本与Monkey.jar包的Android版本一致。<br>（由于不同版本的Android系统API不同，因此不同版本的Monkey包也是不能通用的。例如：Android 4.2版本的Monkey只能在Android 4.2的系统上运行。）</p><p>步骤1：创建启动shell脚本。<br>在本地新建一个用于启动Monkey的shell脚本，输入以下命令，并保存成Monkey。这个文件是用来启动和执行Monkey.jar的，如下面的代码所示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Script to start &quot;monkeytest&quot;on the device, which has a very rudimentary</span><br><span class="line"># shell.</span><br><span class="line">#这里要填写编译后生成的jar文件名称</span><br><span class="line">export CLASSPATH=/data/ Monkey.jar</span><br><span class="line">#这里要填写jar文件中的入口函数所在类</span><br><span class="line">exec app_process /data com.android.debug.monkey.Monkey $*</span><br></pre></td></tr></table></figure><p>步骤2：上传脚本和jar包到手机。<br>将步骤1创建的Monkey脚本和Monkey.jar包上传到手机的/data/loal目录（可自己定义，与shell脚本中的目录一致即可），并将Monkey文件修改成可执行权限，如下面代码所示。<br>adb push Monkey.jar /data<br>adb push monkey /data<br>adb shell chmod777 /data/monkey<br>个别手机上执行chmod命令时会报Segmentation Fault错误，这时可以先adb shell进入，通过sw root命令切换到root下，再执行chrnod 777/data/monkey即可。</p><p>步骤3：运行monkey。<br>通过命令行窗口，输入 adb shell./data/local/monkey  命令启动Monkey.jar包即可运行Monkey。</p><hr><h1 id="Monkey源码改造"><a href="#Monkey源码改造" class="headerlink" title="Monkey源码改造"></a>Monkey源码改造</h1><p>代码目录如下：</p><p><img src="http://img.blog.csdn.net/20170123150405391?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvVG9CZVRoZUVuZGVy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h2 id="1-截图"><a href="#1-截图" class="headerlink" title="1. 截图"></a>1. 截图</h2><p>掌握重编译Monkey的方法后，接下来要开始进行Monkey源码改造了。第一个改造就是截图改造。Monkey使用过程中最大的难题就是如何获取异常出现的场景。虽然Monkey在执行过程中提供了日志来记录事件执行顺序，但是光靠日志来定位异常出现的场景并复现它是非常困难的。当Monkey执行过程中出现异常时，若可以对应进行截图并记录异常出现前执行的操作，就可以清晰地知道异常出现的场景，也便于定位和解决问题。</p><p>具体改造方法如下：<br>测试期望实现的是在每个事件执行过程中增加截图并在图片上画出事件轨迹。这里以屏幕触摸操作为例，首先找到触摸事件所在的文件MonkeyMotionEvent.java，找到负责执行该事件的injectMotionEvent方法。代码清单如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">public int injectEvent(IWindowManager iwm, IActivityManager iam, int verbose) &#123;</span><br><span class="line">        MotionEvent me = getEvent();</span><br><span class="line">        if ((verbose &gt; 0 &amp;&amp; !mIntermediateNote) || verbose &gt; 1) &#123;</span><br><span class="line">            StringBuilder msg = new StringBuilder(&quot;:Sending &quot;);</span><br><span class="line">            msg.append(getTypeLabel()).append(&quot; (&quot;);</span><br><span class="line">            switch (me.getActionMasked()) &#123;</span><br><span class="line">                case MotionEvent.ACTION_DOWN:</span><br><span class="line">                    msg.append(&quot;ACTION_DOWN&quot;);</span><br><span class="line">                   </span><br><span class="line">                    //截图</span><br><span class="line">                    ImageUtils.takeScreenshot();</span><br><span class="line">                    //获取当前点击坐标，存到队列中</span><br><span class="line">                    ImageUtils.addPoint(me.getX(),me.getY());                         </span><br><span class="line">                    break;</span><br><span class="line">                case MotionEvent.ACTION_UP:</span><br><span class="line">                    msg.append(&quot;ACTION_UP&quot;);</span><br><span class="line">                    //获取当前点击坐标，存到队列中</span><br><span class="line">                    ImageUtils.addPoint(me.getX(),me.getY());</span><br><span class="line">                    //把队列中的点击坐标画到图片上</span><br><span class="line">                    Bitmap bc=ImageUtils.drawPoint(ImageUtils.scaleBitmap());</span><br><span class="line">            //bc=ImageUtils.lessenBitmap(bc,0.6f);//等比压缩</span><br><span class="line">            //bc=ImageUtils.zoomBitmap(bc,400);//等高压缩</span><br><span class="line">            ImageUtils.saveBitmap(bc);//保存图片</span><br><span class="line">                    //清空队列</span><br><span class="line">                    ImageUtils.removePointList();</span><br><span class="line">                    break;</span><br><span class="line">                  </span><br><span class="line">                case MotionEvent.ACTION_MOVE:</span><br><span class="line">                    msg.append(&quot;ACTION_MOVE&quot;);</span><br><span class="line">                    //获取当前点击坐标，存到队列中</span><br><span class="line">                    ImageUtils.addPoint(me.getX(),me.getY());</span><br><span class="line">                    break;</span><br><span class="line">                case MotionEvent.ACTION_CANCEL:</span><br><span class="line">                    msg.append(&quot;ACTION_CANCEL&quot;);</span><br><span class="line">                    break;</span><br><span class="line">                case MotionEvent.ACTION_POINTER_DOWN:</span><br><span class="line">                    msg.append(&quot;ACTION_POINTER_DOWN &quot;).append(me.getPointerId(me.getActionIndex()));</span><br><span class="line">                    break;</span><br><span class="line">                case MotionEvent.ACTION_POINTER_UP:</span><br><span class="line">                    msg.append(&quot;ACTION_POINTER_UP &quot;).append(me.getPointerId(me.getActionIndex()));</span><br><span class="line">                    break;</span><br><span class="line">                default:</span><br><span class="line">                    msg.append(me.getAction());</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line">            msg.append(&quot;):&quot;);</span><br><span class="line"></span><br><span class="line">            int pointerCount = me.getPointerCount();</span><br><span class="line">            for (int i = 0; i &lt; pointerCount; i++) &#123;</span><br><span class="line">                msg.append(&quot; &quot;).append(me.getPointerId(i));</span><br><span class="line">                msg.append(&quot;:(&quot;).append(me.getX(i)).append(&quot;,&quot;).append(me.getY(i)).append(&quot;)&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(msg.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            if (!InputManager.getInstance().injectInputEvent(me,</span><br><span class="line">                    InputManager.INJECT_INPUT_EVENT_MODE_WAIT_FOR_RESULT)) &#123;</span><br><span class="line">                return MonkeyEvent.INJECT_FAIL;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            me.recycle();</span><br><span class="line">        &#125;</span><br><span class="line">        return MonkeyEvent.INJECT_SUCCESS;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>参照上面的修改思路，将Monkey的其他方法也进行类似的修改。这样，Monkey每执行一个操作，系统就会自动对其进行截图描点了。</p><h2 id="2-Wi-Fi自动重连优化"><a href="#2-Wi-Fi自动重连优化" class="headerlink" title="2.Wi-Fi自动重连优化"></a>2.Wi-Fi自动重连优化</h2><p>我们知道大部分的应用程序是需要联网的，假如Monkey在执行过程中Wi-Fi断开了怎么办？由于Monkey执行的是随机事件流，过程中的操作无法控制，用户很容易误点到工具栏而导致Wi-Fi断开。对于需要联网的应用，当Wi-Fi断开后，很多页面都会无法打开，此时Monkey执行的效果会相当不理想。相信这也是绝大多数用户遇到的问题，当前小节介绍的就是如何通过Monkey改造来实现Wi-Fi断开重连的功能。<br>首先，新增一个用于Wi-Fi监控的事件MonkeyWifiEvent。在Monkey中新增一类事件有以下两个步骤。</p><ul><li>在MonkeyEvent新增一个eventType类型，如代码清单所示</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">publicabstractclassMonkeyEvent &#123;</span><br><span class="line">protectedinteventType;</span><br><span class="line">publicstaticfinalintEVENT_TYPE_KEY = 0;</span><br><span class="line">publicstaticfinalintEVENT_TYPE_TOUCH = 1;</span><br><span class="line">publicstaticfinalintEVENT_TYPE_TRACKBALL = 2;</span><br><span class="line">publicstaticfinalintEVENT_TYPE_ROTATION = 3;  // Screen rotation</span><br><span class="line">publicstaticfinalintEVENT_TYPE_ACTIVITY = 4;</span><br><span class="line">publicstaticfinalintEVENT_TYPE_FLIP = 5;</span><br><span class="line">publicstaticfinalintEVENT_TYPE_THROTTLE = 6;</span><br><span class="line">publicstaticfinalintEVENT_TYPE_NOOP = 7;</span><br><span class="line">#新增一个Wi-Fi监控的事件类型</span><br><span class="line">publicstaticfinalintEVENT_TYPE_WifiCheck = 9;</span><br><span class="line">…</span><br></pre></td></tr></table></figure><ul><li>新增对应事件的MonkeyWifiEvent类，需继承自MonkeyEvent类，代码清单所示：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">publicclassMonkeyWifiEvent extendsMonkeyEvent&#123;</span><br><span class="line">//初始方法</span><br><span class="line">publicMonkeyWifiEvent() &#123;</span><br><span class="line">super(MonkeyEvent.EVENT_TYPE_WifiCheck);</span><br><span class="line">&#125;</span><br><span class="line">//调用CheckWifiConnection()方法检查Wi-Fi连接</span><br><span class="line">publicintinjectEvent(IWindowManager iwm, IActivityManager iam,intverbose)&#123;</span><br><span class="line">System.out.println(&quot;Check Wifi Conection.&quot;);</span><br><span class="line">wifiManager.CheckWifiConnection();</span><br><span class="line">returnMonkeyEvent.INJECT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码可以看到，该事件是通过调用CheckWifiConnection（）方法来检查Wi-Fi连接并自动重连的。CheckWifiConnection（）方法的实现很简单，首先初始化一个WifiManager的对象，调用其getWifiEnabledState方法，检查当前Wi-Fi是否连接，当判断为Wi-Fi无连接时，调用setWifiEnabled方法打开Wi-Fi。等待Wi-Fi打开后，通过getConfiguredNetworks方法获取Wi-Fi列表，并遍历列表查找需要连接的Wi-Fi的SSID。查找到后，连接到对应的Wi-Fi上。具体实现如代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">publicstaticvoidCheckWifiConnection()&#123;</span><br><span class="line">IWifiManager im=IWifiManager.Stub.asInterface(ServiceManager</span><br><span class="line">.getService(&quot;wifi&quot;));</span><br><span class="line">try&#123;</span><br><span class="line">intstate=im.getWifiEnabledState();</span><br><span class="line">System.out.println(state);</span><br><span class="line">WifiInfo wi=im.getConnectionInfo();</span><br><span class="line">if(state!=3)&#123;</span><br><span class="line">//打开Wi-Fi</span><br><span class="line">System.out.println(&quot;Wifi not conect, connecting wifi.&quot;);</span><br><span class="line">im.setWifiEnabled(true);</span><br><span class="line">//等待Wi-Fi打开，然后连接freewifi</span><br><span class="line">for(inti=0;i&lt;90;i++)&#123;</span><br><span class="line">if(im.getWifiEnabledState()==3)&#123;</span><br><span class="line">//连接freewifi</span><br><span class="line">List t=im.getConfiguredNetworks();</span><br><span class="line">if(t!=null)&#123;</span><br><span class="line">for(int j=0;j</span><br><span class="line">if(t.get(j).SSID.indexOf(&quot;Tencent-FreeWiFi&quot;)!=-1)&#123;</span><br><span class="line">intnetworkid=t.get(j).networkId;</span><br><span class="line">im.enableNetwork(networkid, true);</span><br><span class="line">Thread.sleep(7000);</span><br><span class="line">&#125;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">break;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">hread.sleep(2000);</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch(RemoteException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; catch(InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;catch(SecurityException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面说的需求是实现定时监控，所以需要在Monkey.java中的runMonkeyCycles（）下每隔1000个事件就插入一个Wi-Fi监控事件，实现如代码清单如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">privateintrunMonkeyCycles() &#123;</span><br><span class="line">inteventCounter = 0;</span><br><span class="line">intcycleCounter = 0;</span><br><span class="line">booleanshouldReportAnrTraces = false;</span><br><span class="line">booleanshouldReportDumpsysMemInfo = false;</span><br><span class="line">booleanshouldAbort = false;</span><br><span class="line">booleansystemCrashed = false;</span><br><span class="line">// TO DO : The count should apply to each of the script file.</span><br><span class="line">while(!systemCrashed &amp;&amp; cycleCounter &lt; mCount) &#123;</span><br><span class="line">...</span><br><span class="line">//添加Wi-Fi检查的事件—sharon</span><br><span class="line">if(cycleCounter%1000==0)&#123;</span><br><span class="line">try&#123;</span><br><span class="line">addWifiEvent();</span><br><span class="line">&#125; catch(RemoteException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;Events injected: &quot;+ eventCounter);</span><br><span class="line">returneventCounter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，当Monkey每执行完1000个事件后，就会去检测一下Wi-Fi的连接状态，当发现Wi-Fi断开就会自动重连。重新编译一下Monkey，然后看一下效果，当Monkey检查到Wi-Fi断开会自动重连。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>Monkey是Android测试中常用的一个稳定性测试工具，掌握Monkey工具本身的使用方法是非常简单的。但是真正能深入了解Monkey的代码实现逻辑，并且具备优化Monkey能力，还是需要一定难度。通过本blog，大家应该学习到Monkey的一些基本知识和基本使用方法，还可以通过对Monkey代码逻辑和扩展实例的学习，有所启发，掌握新的自动化测试的方案。</p><p>上面我说分析的只是截图功能和wifi重连功能，还有其他的功能，大家都可以去尝试开发，由于篇幅太长，我就不一一阐述啦，有问题随时留言，或加我微信一起探讨。。</p><p><img src="http://img.blog.csdn.net/20170123152604717?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvVG9CZVRoZUVuZGVy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文为CharliChen原创文章，转载请注明出处！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h1&gt;&lt;p&gt;前面一遍blog
      
    
    </summary>
    
      <category term="测试开发" scheme="http://yoursite.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="专项测试" scheme="http://yoursite.com/tags/%E4%B8%93%E9%A1%B9%E6%B5%8B%E8%AF%95/"/>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android稳定性测试-- Monkey源码分析</title>
    <link href="http://yoursite.com/2016/12/29/Android%E7%A8%B3%E5%AE%9A%E6%80%A7%E6%B5%8B%E8%AF%95--%20Monkey%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2016/12/29/Android稳定性测试-- Monkey源码分析/</id>
    <published>2016-12-29T15:11:25.000Z</published>
    <updated>2018-05-01T12:23:02.262Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文为CharliChen原创文章，转载请注明出处！！</p></blockquote><h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>前面一遍blog <a href="http://blog.csdn.net/tobetheender/article/details/53448949" target="_blank" rel="noopener">Monkey源码分析</a>讲到Monkey的代码结构和代码执行流程，相信通过介绍大家应该对monkey的运行原理和核心逻辑有了很深刻的了解。我们做的这一切都是为了更好的了解monkey的内部逻辑进行二次开发。<br>为什么要二次开发前面的文章也大概说了，它毕竟是一款为稳定性测试而准备的小工具，所以存在很多局限性：</p><ul><li>Monkey不提供<strong>截屏功能</strong>，因此测试很难找到问题复现的场景；</li><li>Monkey无法进行<strong>控件识别</strong>，对事件流控制能力很微弱；</li><li>执行过程中容易误点工具栏导致Wi-Fi关闭，影响测试效果；等等。</li></ul><p>本节重点介绍的就是如何通过Monkey源码改造的方法来解决上述问题，以更好地提升Monkey的使用效果。<br>1.保持随机<br>2.尽可能让其他控件有相同机会<br>3.尽可能操作有意义的控件<br>4.尽可能覆盖到每个Activity </p><h1 id="Monkey代码重编译"><a href="#Monkey代码重编译" class="headerlink" title="Monkey代码重编译"></a>Monkey代码重编译</h1><p>monkey.jar的源码位于Android源码的<br>\development\cmds\monkey\src\com\android\commands\monkey 目录下，如图所示<br><img src="http://img.blog.csdn.net/20170123143738307?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvVG9CZVRoZUVuZGVy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><hr><p><strong>Monkey重编译的方法有两种:</strong></p><ul><li>一种是在Linux环境下编译</li><li>另一种是在Windows环境下编译</li></ul><p>因为在Windows环境下编译更为常见，所以这里会重点介绍第二种方法。</p><h2 id="Linux环境下编译"><a href="#Linux环境下编译" class="headerlink" title="Linux环境下编译"></a>Linux环境下编译</h2><p>在Linux环境下，下载要测试Android系统版本对应的全部源代码，进入源码目录。</p><ul><li>执行.build/envsetup.sh，设置Android的编译环境</li><li>执行make monkey开始编译Monkey</li><li>编译成功后，可在/out/target/product/generic/system/framework/中获取Monkey.jar包。</li></ul><h2 id="Windows环境下编译"><a href="#Windows环境下编译" class="headerlink" title="Windows环境下编译"></a>Windows环境下编译</h2><p>Windows环境下的编译要稍微复杂一点。</p><ul><li>创建Monkey项目。同样也是需要下载要测试Android系统版本对应的全部源代码，在/development/cmds/monkey目录下找到Monkey的工程源码。在Eclipse中新建一个Java工程，把Monkey源码导入进去</li><li>设置Java Build Path。选中对应项目，在顶部菜单栏依次选题Project→Properties→Jave Build Path→Libraries，添加两个jar文件：android.jar和framework.jar。</li></ul><p>其中android.jar可以从Android Sdk中platforms\android-X\目录下获取；framework.jar可以通过以下两种方式获取。<br>（1）（推荐）从在Linux环境下Android源码根目录执行make update-api编译生成，如截图中的classes_dex2jar.jar文件就是通过Android源码编译生成的。<br>（2）直接从Android手机上/system/framework目录下获取已经编译好的framework.jar文件，把这个framework.jar解压，取出其dex，然后把它的dex通过dex2jar工具转换为jar包，导入工程。添加android和framework的jar包后，还需要将framework的jar包顺序调整到顶部，如图所示：<br><img src="http://img.blog.csdn.net/20170123144756497?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvVG9CZVRoZUVuZGVy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><ul><li><p>编译生成jar包。选择Monkey项目，单击右键→单击Export→选择输出的Jar包类型为“JAR file”类，单击“Next”按钮；选择对应的构建工程，填写jar包输出路径，单击“Next”按钮；进入打包选项页面，这里用默认选项即可，直接单击“Next”按钮；<br>选择工程中main函数所在的类，单击“Finish”按钮；编译完成后，在指定目录下就会生成对应的Monkey.jar包了。</p></li><li><p>转换Monkey.jar包。Eclipse编译出来的jar包是不能直接放到Android手机上运行的，在Android上无法像Java中那样方便地动态加载jar。原因是：Android的虚拟机（Dalvik VM）是不能识别Java打出的jar的byte code的，这里需要通过Android sdk中的dx工具来优化转换成Dalvik byte code才行。</p></li></ul><p>将打包好的jar复制到SDK安装目录android-sdk-windows\platform-tools下，打开命令行进入platform-tools目录，执行命令：<br>dx –dex –output=&lt;生成的目标文件&gt;  &lt;要转换的文件&gt;</p><h2 id="重编译的包运行方法"><a href="#重编译的包运行方法" class="headerlink" title="重编译的包运行方法"></a>重编译的包运行方法</h2><p>要运行重编译后的Monkey.jar有以下两个前提条件。<br>·手机拥有root权限。<br>·手机Android版本与Monkey.jar包的Android版本一致。<br>（由于不同版本的Android系统API不同，因此不同版本的Monkey包也是不能通用的。例如：Android 4.2版本的Monkey只能在Android 4.2的系统上运行。）</p><p>步骤1：创建启动shell脚本。<br>在本地新建一个用于启动Monkey的shell脚本，输入以下命令，并保存成Monkey。这个文件是用来启动和执行Monkey.jar的，如下面的代码所示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Script to start &quot;monkeytest&quot;on the device, which has a very rudimentary</span><br><span class="line"># shell.</span><br><span class="line">#这里要填写编译后生成的jar文件名称</span><br><span class="line">export CLASSPATH=/data/ Monkey.jar</span><br><span class="line">#这里要填写jar文件中的入口函数所在类</span><br><span class="line">exec app_process /data com.android.debug.monkey.Monkey $*</span><br></pre></td></tr></table></figure><p>步骤2：上传脚本和jar包到手机。<br>将步骤1创建的Monkey脚本和Monkey.jar包上传到手机的/data/loal目录（可自己定义，与shell脚本中的目录一致即可），并将Monkey文件修改成可执行权限，如下面代码所示。<br>adb push Monkey.jar /data<br>adb push monkey /data<br>adb shell chmod777 /data/monkey<br>个别手机上执行chmod命令时会报Segmentation Fault错误，这时可以先adb shell进入，通过sw root命令切换到root下，再执行chrnod 777/data/monkey即可。</p><p>步骤3：运行monkey。<br>通过命令行窗口，输入 adb shell./data/local/monkey  命令启动Monkey.jar包即可运行Monkey。</p><hr><h1 id="Monkey源码改造"><a href="#Monkey源码改造" class="headerlink" title="Monkey源码改造"></a>Monkey源码改造</h1><p>代码目录如下：</p><p><img src="http://img.blog.csdn.net/20170123150405391?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvVG9CZVRoZUVuZGVy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h2 id="1-截图"><a href="#1-截图" class="headerlink" title="1. 截图"></a>1. 截图</h2><p>掌握重编译Monkey的方法后，接下来要开始进行Monkey源码改造了。第一个改造就是截图改造。Monkey使用过程中最大的难题就是如何获取异常出现的场景。虽然Monkey在执行过程中提供了日志来记录事件执行顺序，但是光靠日志来定位异常出现的场景并复现它是非常困难的。当Monkey执行过程中出现异常时，若可以对应进行截图并记录异常出现前执行的操作，就可以清晰地知道异常出现的场景，也便于定位和解决问题。</p><p>具体改造方法如下：<br>测试期望实现的是在每个事件执行过程中增加截图并在图片上画出事件轨迹。这里以屏幕触摸操作为例，首先找到触摸事件所在的文件MonkeyMotionEvent.java，找到负责执行该事件的injectMotionEvent方法。代码清单如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">public int injectEvent(IWindowManager iwm, IActivityManager iam, int verbose) &#123;</span><br><span class="line">        MotionEvent me = getEvent();</span><br><span class="line">        if ((verbose &gt; 0 &amp;&amp; !mIntermediateNote) || verbose &gt; 1) &#123;</span><br><span class="line">            StringBuilder msg = new StringBuilder(&quot;:Sending &quot;);</span><br><span class="line">            msg.append(getTypeLabel()).append(&quot; (&quot;);</span><br><span class="line">            switch (me.getActionMasked()) &#123;</span><br><span class="line">                case MotionEvent.ACTION_DOWN:</span><br><span class="line">                    msg.append(&quot;ACTION_DOWN&quot;);</span><br><span class="line">                   </span><br><span class="line">                    //截图</span><br><span class="line">                    ImageUtils.takeScreenshot();</span><br><span class="line">                    //获取当前点击坐标，存到队列中</span><br><span class="line">                    ImageUtils.addPoint(me.getX(),me.getY());                         </span><br><span class="line">                    break;</span><br><span class="line">                case MotionEvent.ACTION_UP:</span><br><span class="line">                    msg.append(&quot;ACTION_UP&quot;);</span><br><span class="line">                    //获取当前点击坐标，存到队列中</span><br><span class="line">                    ImageUtils.addPoint(me.getX(),me.getY());</span><br><span class="line">                    //把队列中的点击坐标画到图片上</span><br><span class="line">                    Bitmap bc=ImageUtils.drawPoint(ImageUtils.scaleBitmap());</span><br><span class="line">            //bc=ImageUtils.lessenBitmap(bc,0.6f);//等比压缩</span><br><span class="line">            //bc=ImageUtils.zoomBitmap(bc,400);//等高压缩</span><br><span class="line">            ImageUtils.saveBitmap(bc);//保存图片</span><br><span class="line">                    //清空队列</span><br><span class="line">                    ImageUtils.removePointList();</span><br><span class="line">                    break;</span><br><span class="line">                  </span><br><span class="line">                case MotionEvent.ACTION_MOVE:</span><br><span class="line">                    msg.append(&quot;ACTION_MOVE&quot;);</span><br><span class="line">                    //获取当前点击坐标，存到队列中</span><br><span class="line">                    ImageUtils.addPoint(me.getX(),me.getY());</span><br><span class="line">                    break;</span><br><span class="line">                case MotionEvent.ACTION_CANCEL:</span><br><span class="line">                    msg.append(&quot;ACTION_CANCEL&quot;);</span><br><span class="line">                    break;</span><br><span class="line">                case MotionEvent.ACTION_POINTER_DOWN:</span><br><span class="line">                    msg.append(&quot;ACTION_POINTER_DOWN &quot;).append(me.getPointerId(me.getActionIndex()));</span><br><span class="line">                    break;</span><br><span class="line">                case MotionEvent.ACTION_POINTER_UP:</span><br><span class="line">                    msg.append(&quot;ACTION_POINTER_UP &quot;).append(me.getPointerId(me.getActionIndex()));</span><br><span class="line">                    break;</span><br><span class="line">                default:</span><br><span class="line">                    msg.append(me.getAction());</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line">            msg.append(&quot;):&quot;);</span><br><span class="line"></span><br><span class="line">            int pointerCount = me.getPointerCount();</span><br><span class="line">            for (int i = 0; i &lt; pointerCount; i++) &#123;</span><br><span class="line">                msg.append(&quot; &quot;).append(me.getPointerId(i));</span><br><span class="line">                msg.append(&quot;:(&quot;).append(me.getX(i)).append(&quot;,&quot;).append(me.getY(i)).append(&quot;)&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(msg.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            if (!InputManager.getInstance().injectInputEvent(me,</span><br><span class="line">                    InputManager.INJECT_INPUT_EVENT_MODE_WAIT_FOR_RESULT)) &#123;</span><br><span class="line">                return MonkeyEvent.INJECT_FAIL;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            me.recycle();</span><br><span class="line">        &#125;</span><br><span class="line">        return MonkeyEvent.INJECT_SUCCESS;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>参照上面的修改思路，将Monkey的其他方法也进行类似的修改。这样，Monkey每执行一个操作，系统就会自动对其进行截图描点了。</p><h2 id="2-Wi-Fi自动重连优化"><a href="#2-Wi-Fi自动重连优化" class="headerlink" title="2.Wi-Fi自动重连优化"></a>2.Wi-Fi自动重连优化</h2><p>我们知道大部分的应用程序是需要联网的，假如Monkey在执行过程中Wi-Fi断开了怎么办？由于Monkey执行的是随机事件流，过程中的操作无法控制，用户很容易误点到工具栏而导致Wi-Fi断开。对于需要联网的应用，当Wi-Fi断开后，很多页面都会无法打开，此时Monkey执行的效果会相当不理想。相信这也是绝大多数用户遇到的问题，当前小节介绍的就是如何通过Monkey改造来实现Wi-Fi断开重连的功能。<br>首先，新增一个用于Wi-Fi监控的事件MonkeyWifiEvent。在Monkey中新增一类事件有以下两个步骤。</p><ul><li>在MonkeyEvent新增一个eventType类型，如代码清单所示</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">publicabstractclassMonkeyEvent &#123;</span><br><span class="line">protectedinteventType;</span><br><span class="line">publicstaticfinalintEVENT_TYPE_KEY = 0;</span><br><span class="line">publicstaticfinalintEVENT_TYPE_TOUCH = 1;</span><br><span class="line">publicstaticfinalintEVENT_TYPE_TRACKBALL = 2;</span><br><span class="line">publicstaticfinalintEVENT_TYPE_ROTATION = 3;  // Screen rotation</span><br><span class="line">publicstaticfinalintEVENT_TYPE_ACTIVITY = 4;</span><br><span class="line">publicstaticfinalintEVENT_TYPE_FLIP = 5;</span><br><span class="line">publicstaticfinalintEVENT_TYPE_THROTTLE = 6;</span><br><span class="line">publicstaticfinalintEVENT_TYPE_NOOP = 7;</span><br><span class="line">#新增一个Wi-Fi监控的事件类型</span><br><span class="line">publicstaticfinalintEVENT_TYPE_WifiCheck = 9;</span><br><span class="line">…</span><br></pre></td></tr></table></figure><ul><li>新增对应事件的MonkeyWifiEvent类，需继承自MonkeyEvent类，代码清单所示：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">publicclassMonkeyWifiEvent extendsMonkeyEvent&#123;</span><br><span class="line">//初始方法</span><br><span class="line">publicMonkeyWifiEvent() &#123;</span><br><span class="line">super(MonkeyEvent.EVENT_TYPE_WifiCheck);</span><br><span class="line">&#125;</span><br><span class="line">//调用CheckWifiConnection()方法检查Wi-Fi连接</span><br><span class="line">publicintinjectEvent(IWindowManager iwm, IActivityManager iam,intverbose)&#123;</span><br><span class="line">System.out.println(&quot;Check Wifi Conection.&quot;);</span><br><span class="line">wifiManager.CheckWifiConnection();</span><br><span class="line">returnMonkeyEvent.INJECT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码可以看到，该事件是通过调用CheckWifiConnection（）方法来检查Wi-Fi连接并自动重连的。CheckWifiConnection（）方法的实现很简单，首先初始化一个WifiManager的对象，调用其getWifiEnabledState方法，检查当前Wi-Fi是否连接，当判断为Wi-Fi无连接时，调用setWifiEnabled方法打开Wi-Fi。等待Wi-Fi打开后，通过getConfiguredNetworks方法获取Wi-Fi列表，并遍历列表查找需要连接的Wi-Fi的SSID。查找到后，连接到对应的Wi-Fi上。具体实现如代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">publicstaticvoidCheckWifiConnection()&#123;</span><br><span class="line">IWifiManager im=IWifiManager.Stub.asInterface(ServiceManager</span><br><span class="line">.getService(&quot;wifi&quot;));</span><br><span class="line">try&#123;</span><br><span class="line">intstate=im.getWifiEnabledState();</span><br><span class="line">System.out.println(state);</span><br><span class="line">WifiInfo wi=im.getConnectionInfo();</span><br><span class="line">if(state!=3)&#123;</span><br><span class="line">//打开Wi-Fi</span><br><span class="line">System.out.println(&quot;Wifi not conect, connecting wifi.&quot;);</span><br><span class="line">im.setWifiEnabled(true);</span><br><span class="line">//等待Wi-Fi打开，然后连接freewifi</span><br><span class="line">for(inti=0;i&lt;90;i++)&#123;</span><br><span class="line">if(im.getWifiEnabledState()==3)&#123;</span><br><span class="line">//连接freewifi</span><br><span class="line">List t=im.getConfiguredNetworks();</span><br><span class="line">if(t!=null)&#123;</span><br><span class="line">for(int j=0;j</span><br><span class="line">if(t.get(j).SSID.indexOf(&quot;Tencent-FreeWiFi&quot;)!=-1)&#123;</span><br><span class="line">intnetworkid=t.get(j).networkId;</span><br><span class="line">im.enableNetwork(networkid, true);</span><br><span class="line">Thread.sleep(7000);</span><br><span class="line">&#125;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">break;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">hread.sleep(2000);</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch(RemoteException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; catch(InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;catch(SecurityException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面说的需求是实现定时监控，所以需要在Monkey.java中的runMonkeyCycles（）下每隔1000个事件就插入一个Wi-Fi监控事件，实现如代码清单如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">privateintrunMonkeyCycles() &#123;</span><br><span class="line">inteventCounter = 0;</span><br><span class="line">intcycleCounter = 0;</span><br><span class="line">booleanshouldReportAnrTraces = false;</span><br><span class="line">booleanshouldReportDumpsysMemInfo = false;</span><br><span class="line">booleanshouldAbort = false;</span><br><span class="line">booleansystemCrashed = false;</span><br><span class="line">// TO DO : The count should apply to each of the script file.</span><br><span class="line">while(!systemCrashed &amp;&amp; cycleCounter &lt; mCount) &#123;</span><br><span class="line">...</span><br><span class="line">//添加Wi-Fi检查的事件—sharon</span><br><span class="line">if(cycleCounter%1000==0)&#123;</span><br><span class="line">try&#123;</span><br><span class="line">addWifiEvent();</span><br><span class="line">&#125; catch(RemoteException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;Events injected: &quot;+ eventCounter);</span><br><span class="line">returneventCounter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，当Monkey每执行完1000个事件后，就会去检测一下Wi-Fi的连接状态，当发现Wi-Fi断开就会自动重连。重新编译一下Monkey，然后看一下效果，当Monkey检查到Wi-Fi断开会自动重连。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>Monkey是Android测试中常用的一个稳定性测试工具，掌握Monkey工具本身的使用方法是非常简单的。但是真正能深入了解Monkey的代码实现逻辑，并且具备优化Monkey能力，还是需要一定难度。通过本blog，大家应该学习到Monkey的一些基本知识和基本使用方法，还可以通过对Monkey代码逻辑和扩展实例的学习，有所启发，掌握新的自动化测试的方案。</p><p>上面我说分析的只是截图功能和wifi重连功能，还有其他的功能，大家都可以去尝试开发，由于篇幅太长，我就不一一阐述啦，有问题随时留言，或加我微信一起探讨。。</p><p><img src="http://img.blog.csdn.net/20170123152604717?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvVG9CZVRoZUVuZGVy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文为CharliChen原创文章，转载请注明出处！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h1&gt;&lt;p&gt;前面一遍blog
      
    
    </summary>
    
      <category term="测试开发" scheme="http://yoursite.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="专项测试" scheme="http://yoursite.com/tags/%E4%B8%93%E9%A1%B9%E6%B5%8B%E8%AF%95/"/>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>ITester接口测试框架 (三) - 框架实现细节</title>
    <link href="http://yoursite.com/2016/12/22/ITester%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%20(%E4%B8%89)%20-%20%E6%A1%86%E6%9E%B6%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82/"/>
    <id>http://yoursite.com/2016/12/22/ITester接口测试框架 (三) - 框架实现细节/</id>
    <published>2016-12-22T14:40:22.000Z</published>
    <updated>2018-05-01T12:20:13.662Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文为CharliChen原创文章，转载请注明出处！！</p></blockquote><h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><p>结构图</p><p><img src="http://img.blog.csdn.net/20161124193935168" alt="这里写图片描述"></p><hr><h1 id="框架实现"><a href="#框架实现" class="headerlink" title="框架实现"></a>框架实现</h1><h2 id="1-数据准备-和-参数输入"><a href="#1-数据准备-和-参数输入" class="headerlink" title="1.数据准备 和 参数输入"></a>1.数据准备 和 参数输入</h2><p>数据准备有三种方式：</p><ul><li>一：通过访问数据库，获取我们需要的接口测试参数，比如测试登录接口，我们要提前获得 用户名和密码，然后才能连同我们的url发送给服务端。</li></ul><p>要想访问数据库，必须要先与数据库建立连接，我这里采用的是JDBC 和C3P0，可以参考我之前的blog<br><a href="http://blog.csdn.net/tobetheender/article/details/52772157" target="_blank" rel="noopener">Java通过JDBC 进行MySQL数据库操作</a><br><a href="http://blog.csdn.net/tobetheender/article/details/52841983" target="_blank" rel="noopener">Java数据库连接池 学习笔记</a></p><ul><li>二：直接将所需要的数据写入到xml或者excel中，然后写一个工具类直接去读取就行。</li></ul><p><strong>例如 ：要准备 测试接口输入参数为：email和password</strong></p><p>（1）编写paramsData.xml，将上述参数放在xml中进行管理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;map&gt;   </span><br><span class="line">&lt;bean beanName=&quot;signIn&quot;&gt; </span><br><span class="line">&lt;locator name=&quot;email&quot; value=&quot;charlie.chen@dji.com&quot;&gt;&lt;/locator&gt;</span><br><span class="line">&lt;locator name=&quot;password&quot; value=&quot;123456&quot;&gt;&lt;/locator&gt; </span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;/map&gt;</span><br></pre></td></tr></table></figure><p>（2）封装一个XmlUtil工具类负责读取xml ,使用第三方的jar包dom4j，XmlUtil中readXMLDocument方法返回值为Map&lt;String, String&gt;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static Map&lt;String, String&gt; readXMLDocument(String xmlPath, String beanName) throws IOException &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述readXMLDocument方法中，参数xmlName为xml文件的名字； 参数beanName为xml文件中节点的名称。</p><ul><li>三：通过xml管理测试数据，也可以用Excel进行管理</li></ul><p>和xml管理数据类似：封装一个ExcelUtil工具类负责读取excel ,使用第三方的jar包poi，ExcelUtil中readExcel方法返回值为List&lt;ParamBean<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 读取Excel中数据</span><br><span class="line">public static List&lt;ParamBean&gt; readExcel(String excelPath) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="2-请求执行"><a href="#2-请求执行" class="headerlink" title="2.请求执行"></a>2.请求执行</h2><p>（1）封装一个CookieUtil工具类，通过CookieStore储存cookie<br>CookieUtil类中setCookieStore方法返回值为CookieStore</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">**</span><br><span class="line"> * 将服务端返回的SessionID存储在CookieStore中</span><br><span class="line"> * @author Charlie.chen</span><br><span class="line"> * @date 2016-10-31</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class CookieUtil &#123;</span><br><span class="line"></span><br><span class="line">    private static CookieStore cookieStore = null;</span><br><span class="line">    private static LogUtil log = new LogUtil(CookieUtil.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * 通过CookieStore储存cookie</span><br><span class="line">     */</span><br><span class="line">    public static CookieStore setCookieStore(HttpResponse httpResponse) &#123;</span><br><span class="line">    </span><br><span class="line">        log.info(&quot;setCookieStore&quot;);</span><br><span class="line">        cookieStore = new BasicCookieStore();</span><br><span class="line">        // JSESSIONID</span><br><span class="line">        String setCookie = httpResponse.getFirstHeader(&quot;Set-Cookie&quot;).getValue();</span><br><span class="line">        String JSESSIONID = setCookie.substring(&quot;JSESSIONID=&quot;.length(),</span><br><span class="line">        setCookie.indexOf(&quot;;&quot;));</span><br><span class="line">        log.debug(&quot;JSESSIONID:&quot; + JSESSIONID);</span><br><span class="line">        </span><br><span class="line">        // 新建一个Cookie</span><br><span class="line">        BasicClientCookie cookie = new BasicClientCookie(&quot;JSESSIONID&quot;, JSESSIONID);</span><br><span class="line">        cookie.setVersion(0);</span><br><span class="line">        cookie.setDomain(&quot;127.0.0.1&quot;);</span><br><span class="line">        cookie.setPath(&quot;/CwlProClient&quot;);</span><br><span class="line">       </span><br><span class="line">        cookieStore.addCookie(cookie);</span><br><span class="line">        return cookieStore;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述setCookieStore方法中，httpResponse参数为服务端响应值，类型为HttpResponse</p><p>（2）用httpClient简单封装一个httpClientUtil工具类有get.post,put,delete方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public static CloseableHttpResponse doGet(String url, Map&lt;String, String&gt; paramsMap, CloseableHttpClient httpclient, CookieStore cookieStore) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static CloseableHttpResponse doPost(String url, Map&lt;String, String&gt; paramsMap, CloseableHttpClient httpclient,CookieStore cookieStore) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static CloseableHttpResponse doPut(String url, Map&lt;String, String&gt; paramsMap, CloseableHttpClient httpclient, CookieStore cookieStore) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static CloseableHttpResponse doDelete(String url, Map&lt;String, String&gt; paramsMap, CloseableHttpClient httpclient, CookieStore cookieStore) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 封装一个获取请求实体的方法</span><br><span class="line">* @param params</span><br><span class="line">* @param ucode</span><br><span class="line">* @return</span><br><span class="line">*/</span><br><span class="line">public static UrlEncodedFormEntity getFormEntity(Map&lt;String, String&gt; paramsMap, Charset... ucode) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-结果解析-和-验证"><a href="#3-结果解析-和-验证" class="headerlink" title="3.结果解析 和 验证"></a>3.结果解析 和 验证</h2><p>（1）将从服务端返回的HttpResponse结果解析为ResponseBean对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public class ReponseUtil &#123;</span><br><span class="line"></span><br><span class="line">private static LogUtil log = new LogUtil(ReponseUtil.class);</span><br><span class="line">private static ResponseBean responseBean=null;</span><br><span class="line"></span><br><span class="line">public static ResponseBean setResponseBean(CloseableHttpResponse httpResponse) &#123;</span><br><span class="line"></span><br><span class="line">// 使用响应对象获取响应实体</span><br><span class="line">HttpEntity entity = httpResponse.getEntity();</span><br><span class="line">if (entity != null)</span><br><span class="line">try &#123;</span><br><span class="line">// 将响应实体转为字符串</span><br><span class="line">String responseString = EntityUtils.toString(entity, &quot;utf-8&quot;);</span><br><span class="line">String rs = responseString.replace(&quot;\r\n&quot;, &quot;&quot;);</span><br><span class="line"></span><br><span class="line">responseBean = new ResponseBean();</span><br><span class="line">responseBean.setStatus(httpResponse.getStatusLine().getReasonPhrase());</span><br><span class="line">responseBean.setStatusCode(Integer.toString(httpResponse.getStatusLine().getStatusCode()));</span><br><span class="line">responseBean.setBody(rs);</span><br><span class="line"></span><br><span class="line">log.info(&quot;\n&quot; + &quot;***************************返回开始**********************************&quot; + &quot;\n&quot;</span><br><span class="line">+ httpResponse.getStatusLine().getReasonPhrase() + &quot;\n&quot;</span><br><span class="line">+ Integer.toString(httpResponse.getStatusLine().getStatusCode()) + &quot;\n&quot; + &quot;Context&quot; + rs + &quot;\n&quot;</span><br><span class="line">+ &quot;***************************返回结束**********************************&quot;);</span><br><span class="line"></span><br><span class="line">HeaderIterator iterator = httpResponse.headerIterator();</span><br><span class="line">while (iterator.hasNext()) &#123;</span><br><span class="line">log.debug(&quot;\t&quot; + iterator.next());</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">return responseBean;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）结果验证<br>主要验证 HttpResponse的状态status，状态码statusCode和 响应实体body，通过第三方断言jar包AsertJ</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// add Assert</span><br><span class="line">Assert.assertEquals(&quot;OK&quot;, responseBean.getStatus());</span><br><span class="line">Assert.assertEquals(&quot;200&quot;, responseBean.getStatusCode());</span><br><span class="line">Assert.assertEquals(&quot;dsgfdfgdfsdfdgfdg&quot;, responseBean.getBody());</span><br></pre></td></tr></table></figure><h2 id="4-测试用例"><a href="#4-测试用例" class="headerlink" title="4.测试用例"></a>4.测试用例</h2><p>测试用例管理使用了testNG管理 ，使用了TestNG参数化测试，通过xml文件来执行case</p><p>（1）测试case脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">public class NewTest &#123;</span><br><span class="line"></span><br><span class="line">static CookieStore cookieStore=null;</span><br><span class="line"></span><br><span class="line">static CloseableHttpClient httpclient=null;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void test() &#123;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">String url = PropertiesUtil.getValue(&quot;url&quot;,&quot;config.properties&quot;);</span><br><span class="line"></span><br><span class="line">String xmlPath=NewTest.class.getClassLoader().getResource(&quot;paramData.xml&quot;).getPath();</span><br><span class="line"></span><br><span class="line">Map&lt;String, String&gt; paramsMap = XmlUtil.readXMLDocument(xmlPath, &quot;signIn&quot;);</span><br><span class="line"></span><br><span class="line">httpclient = HttpClients.custom().setDefaultCookieStore(cookieStore).build();</span><br><span class="line">CloseableHttpResponse httpResponse = HttpClientUtil.doPost(url, paramsMap, httpclient, cookieStore);</span><br><span class="line"></span><br><span class="line">ResponseBean responseBean = ReponseUtil.setResponseBean(httpResponse);</span><br><span class="line"></span><br><span class="line">// add Assert</span><br><span class="line">Assert.assertEquals(&quot;OK&quot;, responseBean.getStatus());</span><br><span class="line">Assert.assertEquals(&quot;200&quot;, responseBean.getStatusCode());</span><br><span class="line">Assert.assertEquals(&quot;dsgfdfgdfsdfdgfdg&quot;, responseBean.getBody());</span><br><span class="line"></span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@BeforeClass</span><br><span class="line">public void beforeClass() &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@AfterClass</span><br><span class="line">public void afterClass() &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@BeforeTest</span><br><span class="line">public void beforeTest() &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@AfterTest</span><br><span class="line">public void afterTest() &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@BeforeSuite</span><br><span class="line">public void beforeSuite() &#123;</span><br><span class="line">/*</span><br><span class="line">* 登录进入系统获取JSESSIONID放入到CookieStore中</span><br><span class="line">* */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@AfterSuite</span><br><span class="line">public void closeClient() &#123;</span><br><span class="line">try &#123;</span><br><span class="line">// 关闭流并释放资源</span><br><span class="line">httpclient.close();</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）testng.xml文件的编写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE suite SYSTEM &quot;http://testng.org/testng-1.0.dtd&quot;&gt;</span><br><span class="line">&lt;suite name=&quot;Suite&quot; parallel=&quot;false&quot; preserve-order=&quot;true&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;test name=&quot;Test&quot;&gt;</span><br><span class="line">    &lt;classes&gt;</span><br><span class="line">      &lt;class name=&quot;com.dji.itester.cases.NewTest&quot;&gt;</span><br><span class="line">      &lt;methods&gt;</span><br><span class="line">              &lt;include name=&quot;test&quot; /&gt;</span><br><span class="line">         &lt;/methods&gt;</span><br><span class="line">      &lt;/class&gt;</span><br><span class="line">    &lt;/classes&gt;</span><br><span class="line">  &lt;/test&gt; </span><br><span class="line">&lt;/suite&gt;</span><br></pre></td></tr></table></figure><p>右键-&gt;run as -&gt;TestNG Suite,这个场景的的测试用例就可以运行了</p><h2 id="5-失败用例重跑"><a href="#5-失败用例重跑" class="headerlink" title="5.失败用例重跑"></a>5.失败用例重跑</h2><p>关于失败用例重跑，在我前面的blog <a href="http://blog.csdn.net/tobetheender/article/details/52684633" target="_blank" rel="noopener">TestNG实现用例运行失败自动截图和重跑</a> 写的很清楚了，这里就不详说了，大概步骤如下：</p><p>（1）新建TestNGRetry类继承IRetryAnalyzer，实现用例失败自动重跑逻辑<br>（2）添加用例重跑监听器RetryListener，用例失败自动重跑功能<br>（3）在testng.xml文件中配置自己编写的监听器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;listeners&gt;</span><br><span class="line">    &lt;listener class-name=&quot;com.dji.itester.runfail.TestNGListener&quot; /&gt;</span><br><span class="line">    &lt;listener class-name=&quot;com.dji.itester.runfail.RetryListener&quot;/&gt;</span><br><span class="line">&lt;/listeners&gt;</span><br></pre></td></tr></table></figure></p><h2 id="6-源码管理-和-Jenkins配置"><a href="#6-源码管理-和-Jenkins配置" class="headerlink" title="6.源码管理 和 Jenkins配置"></a>6.源码管理 和 Jenkins配置</h2><p>（1）源码管理<br>将代码上传到github上进行托管，关于github的使用参考我前面的blog <a href="http://blog.csdn.net/tobetheender/article/details/52295021" target="_blank" rel="noopener">Git 学习笔记</a>）</p><p>（2）Jenkins配置<br>运行jenkins，首先创建一个job为ITester-DJI<br><img src="http://img.blog.csdn.net/20161125110536407" alt="这里写图片描述"></p><p>将代码上传到github上进行托管，然后在jenkins上配置clone 到你本地或者远程的jenkins来：<br><img src="http://img.blog.csdn.net/20161125110714144" alt="这里写图片描述"></p><p>构建触发器<br>Poll SCM： 定时检查源码变更（根据SCM软件的版本号），如果有更新就checkout最新code下来，然后执行构建动作。Build periodically：周期进行项目构建（它不care源码是否发生变化）<br>我的配置如下： 每天凌晨2：00进行一次构建</p><p><img src="http://img.blog.csdn.net/20161125110849560" alt="这里写图片描述"></p><p>构建<br><img src="http://img.blog.csdn.net/20161125110959936" alt="这里写图片描述"></p><p>构建后操作,发送邮件</p><h2 id="7-测试报告和邮件"><a href="#7-测试报告和邮件" class="headerlink" title="7.测试报告和邮件"></a>7.测试报告和邮件</h2><p>这里用到第三方的jar包ReportNG，对测试报告进行定制化。添加插件，关联testNg.xml,添加ReportNg的监听器，修改最后的TestNG的报告。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">&lt;!-- 添加插件，关联testNg.xml,添加ReportNg的监听器，修改最后的TestNG的报告 --&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.18.1&lt;/version&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">&lt;forkMode&gt;once&lt;/forkMode&gt;  </span><br><span class="line">                   &lt;argLine&gt;-Dfile.encoding=UTF-8&lt;/argLine&gt; </span><br><span class="line"></span><br><span class="line">&lt;suiteXmlFiles&gt;</span><br><span class="line">&lt;!--&lt;suiteXmlFile&gt;testng.xml&lt;/suiteXmlFile&gt;  --&gt;</span><br><span class="line">    &lt;suiteXmlFile&gt;src/test/java/com/dji/itester/testSuites/$&#123;xmlFileName&#125;&lt;/suiteXmlFile&gt; </span><br><span class="line">&lt;/suiteXmlFiles&gt;</span><br><span class="line"></span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;usedefaultlisteners&lt;/name&gt;</span><br><span class="line">&lt;value&gt;false&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;listener&lt;/name&gt;</span><br><span class="line">&lt;value&gt;org.uncommons.reportng.HTMLReporter,</span><br><span class="line">org.uncommons.reportng.JUnitXMLReporter&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;workingDirectory&gt;target/&lt;/workingDirectory&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;source&gt;1.6&lt;/source&gt;</span><br><span class="line">&lt;target&gt;1.6&lt;/target&gt;</span><br><span class="line">&lt;encoding&gt;utf-8&lt;/encoding&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure><p>测试报告：</p><p><img src="http://img.blog.csdn.net/20161125132520107" alt="这里写图片描述"></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文为CharliChen原创文章，转载请注明出处！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;项目结构&quot;&gt;&lt;a href=&quot;#项目结构&quot; class=&quot;headerlink&quot; title=&quot;项目结构&quot;&gt;&lt;/a&gt;项目结构&lt;/h1&gt;&lt;p&gt;
      
    
    </summary>
    
      <category term="测试开发" scheme="http://yoursite.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="接口测试" scheme="http://yoursite.com/tags/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>ITester接口测试框架 (二) - 框架简介和流程图</title>
    <link href="http://yoursite.com/2016/12/22/ITester%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%20(%E4%BA%8C)%20-%20%E6%A1%86%E6%9E%B6%E7%AE%80%E4%BB%8B%E5%92%8C%E6%B5%81%E7%A8%8B%E5%9B%BE/"/>
    <id>http://yoursite.com/2016/12/22/ITester接口测试框架 (二) - 框架简介和流程图/</id>
    <published>2016-12-21T16:47:10.000Z</published>
    <updated>2018-05-01T12:18:15.953Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文为CharliChen原创文章，转载请注明出处！！</p></blockquote><h1 id="ITester框架简介"><a href="#ITester框架简介" class="headerlink" title="ITester框架简介"></a>ITester框架简介</h1><p>上一篇的blog主要讲解了接口测试的基础知识，这一章将详细介绍接口测试框架图和流程图。</p><p>ITester是处理API接口测试的轻量级自动化测试框架，java语言实现。主要是面向service接口，诸如：HTTP，SOAP，JSON-RPC的轻量级自动化测试框架。将数据准备、参数的输入、请求执行、结果解析、数据验证、数据清理各个环节都做了封装，以数据文本文件为接口，降低自动化测试过程中case书写的难度。底层主要使用的是HttpClient+TestNG</p><p><strong>工具特点：</strong></p><blockquote><ol><li>采取数据驱动方式，支持Excel 和Xml以及数据库的方式录入接口请求数据；</li><li>支持失败用例重跑；</li><li>支持用例多线程执行，缩短执行时间(用例间需线程安全)；</li><li>接入Jenkins持续集成平台，随时随地自动化构建，执行测试；</li><li>支持定制化测试报告，邮件通知测试结果。</li></ol></blockquote><hr><h1 id="ITester框架图"><a href="#ITester框架图" class="headerlink" title="ITester框架图"></a>ITester框架图</h1><p><img src="http://img.blog.csdn.net/20161125124053984" alt="这里写图片描述"></p><p>如图所示，我将框架分为五大部分：</p><ul><li>Client：也就是数据准备、参数的输入、请求执行、结果解析、数据验证、数据清理各个环节</li><li>TestCase：测试脚本用例模块</li><li>CI：也就是持续集成模块</li><li>Report：测试报告和邮件通知</li><li>调度：触发整个测试框架运行起来</li></ul><hr><h1 id="ITerster组件"><a href="#ITerster组件" class="headerlink" title="ITerster组件"></a>ITerster组件</h1><p><img src="http://img.blog.csdn.net/20161120173349065" alt="这里写图片描述"></p><p><strong>核心组件</strong></p><ol><li>通过Maven进行项目和依赖管理</li><li>通过HttpClient和服务端进行通信</li><li>通过TestNG进行测试脚本的管理</li><li>通过Log4j生成运行日志</li><li>通过Jackson实现各类型数据：javaBean，xml，json之间的相互转换</li><li>通过C3P0数据库连接池实现与数据库的连接通信</li><li>通过AssertJ提供丰富的断言</li><li>通过ReportNG输出丰富多彩的测试报告</li><li>最后将源码托管于Git通过Jenkins实现持续集成</li></ol><p><strong>调度执行</strong></p><ol><li>通过Maven进行项目的构建，测试</li><li>通过Shell脚本调度执行</li><li>通过Jenkins平台实现持续集成</li></ol><hr><h1 id="接口调用流程"><a href="#接口调用流程" class="headerlink" title="接口调用流程"></a>接口调用流程</h1><p><img src="http://img.blog.csdn.net/20161120183830546" alt="这里写图片描述"></p><hr><h1 id="用例执行流程"><a href="#用例执行流程" class="headerlink" title="用例执行流程"></a>用例执行流程</h1><p><img src="http://img.blog.csdn.net/20161120183539654" alt="这里写图片描述"></p><p>下一篇blog将主要介绍ITester接口框架的实现细节，后续相关的文档和源码会开源到github上！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文为CharliChen原创文章，转载请注明出处！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;ITester框架简介&quot;&gt;&lt;a href=&quot;#ITester框架简介&quot; class=&quot;headerlink&quot; title=&quot;ITester框
      
    
    </summary>
    
      <category term="测试开发" scheme="http://yoursite.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="接口测试" scheme="http://yoursite.com/tags/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>ITester接口测试框架 (一) ：接口基础知识</title>
    <link href="http://yoursite.com/2016/12/22/ITester%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%20(%E4%B8%80)%20%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2016/12/22/ITester接口测试框架 (一) ：接口基础知识/</id>
    <published>2016-12-21T16:12:30.000Z</published>
    <updated>2018-05-01T12:16:41.118Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文为CharliChen原创文章，转载请注明出处！！</p></blockquote><p>本系列教材将主要为大家讲解接口测试框架的设计，本框架属于轻量型的，目前的需求基本都能满足，后续还要不断的完善，最后开源出去。暂且命名为ITester（取名字是一件很蛋疼的事情，要与接口相关，又要不能和其他框架重名）</p><p>同样先规划下系列blog目录：<br>ITester接口测试框架(一)：接口基础知识<br>ITester接口测试框架(二)：框架简介和流程图<br>ITester接口测试框架(三)：框架实现细节</p><p>接下来开始第一部分，接口测试基础知识的讲解</p><h1 id="什么是接口测试"><a href="#什么是接口测试" class="headerlink" title="什么是接口测试"></a>什么是接口测试</h1><blockquote><p>接口是指系统模块与模块或系统与系统间进行交互,一般我们用的多的是HTTP协议的接口、WebService协议的接口,还有RPC (Remote Procedure Call Protocol)——远程过程调用协议的接口。</p></blockquote><p>接口测试是为了测试接口，尤其是那些与系统相关联的外部接口，测试的重点是要检查数据的交换，传递和控制管理过程，还包括处理的次数。<br>不管是哪种接口,其本质就是发送一个request,然后服务器响应 后返回一个response,然后我们对response进行分析,这即是接口测试。</p><h1 id="为什么要做接口测试"><a href="#为什么要做接口测试" class="headerlink" title="为什么要做接口测试"></a>为什么要做接口测试</h1><ul><li>首先，随着系统复杂程度的上升，传统的测试方法测试成本急剧增加，测试效率大幅下降（数据模型推算，底层的一个bug能够引发上层的 8 个左右bug，而且底层的bug很容易引起全网的宕机。相反接口测试能够提供系统复杂度上升情况下的低成本高效率的解决方案。</li><li>其次接口测试不同于传统开发的单元测试，接口测试是站在用户的角度对系统接口进行全面高效持续的检测。</li><li>最后接口测试是自动化并且持续集成的，这也是为什么接口测试能够低成本高收益的根源。</li></ul><p>接口测试的核心战略在于：以保证系统的正确和稳定为核心，以持续集成为手段，提高测试效率，提升用户体验，降低产品研发成本。</p><p>接口测试要为代码的编写保驾护航，增强开发人员和测试人员的自信，让隐含的 BUG提前暴露出来，要让开发人员在第一时间修复 BUG，要让功能测试人员和性能测试人员在测试的时候更加顺手，最大限度得减少底层 BUG 的出现数量，要让产品研发的流程更加敏捷，要缩短产品的研发周期，最后在产品上线以后，要让用户用得更加顺畅，要让用户感觉产品服务零缺陷。</p><p>另外在这个过程中，我们需要几类资源作为支撑，下面做简单描述。</p><ol><li>首先最重要的一点是要强调团队的重要性，特别是团队中需要有合理的人力资源配置，在这个团队中，需要全才，也需要专才，需要技术专家，也需要业务专家，既需要高效的执行者，也需要有效的管理者，任何人在这个团队中都可以发挥重要作用。</li><li>其次我们需要强大的测试技术以及测试框架去支撑我们的日常工作，包括基于 JAVA 以及基于 C++的测试框架，甚至以后会扩展到其他各个语种的框架，计算机软件的架构发展到今天，特别是分布式软件的发展，导致软件体系结构日益复杂化，各个系统之间的依赖逐渐加强，JAVA、C++以及多种技术的综合使用，使传统的单元测试已经无法满足于针对接口编程的架构方式，我们需要以一种更加干净的层面也就是从业务的层面对接口进行隔离测试，同时为了模拟真实场景，也需要在真实的环境中对系统内根据业务流程对各个接口进行串联测试，</li><li>最后以持续集成系统保证被测代码的稳定性。再次要充分重视文档的重要性，包括需求文档，开发技术方案，测试技术方案，接口定义 JAVADOC，测试用例文档等等，完善这些文档可以大大减少软件工程周期中各个团队配合障碍，也可以降低后期软件维护成本。因此贯彻和落实接口测试的战略可以最大程度地提高软件质量的稳定性。</li></ol><h1 id="接口的种类"><a href="#接口的种类" class="headerlink" title="接口的种类"></a>接口的种类</h1><ul><li>系统与系统之间的调用，比如支付宝会提供接口给DJI商城调用，或者说，支付宝会提供接口给天猫调用</li><li>上层服务对下层服务的调用，比如Service层会调用DAO层的接口，而应用层又会调用Service层提供的接口</li><li>服务之间的调用，比如注册用户时，会先调用用户查询的服务，查看该用户是否已经注册。</li></ul><p>而我们所要做的接口测试，先要了解是基于哪一种类型的接口测试，不同类型的接口测试方法可能是不一致的，总体来说，不管是哪种类型，我们只要把被测接口当做是服务方，而把我们的测试手段当做是客户方，我们的目的就是，通过我们的测试手段，去验证服务端满足了他声明提供的功能。</p><h1 id="GET和POST区别"><a href="#GET和POST区别" class="headerlink" title="GET和POST区别"></a>GET和POST区别</h1><p>参考我之前的csdn blog：<a href="http://blog.csdn.net/tobetheender/article/details/52277989" target="_blank" rel="noopener">HTTP 学习笔记</a></p><h2 id="GET方式提交"><a href="#GET方式提交" class="headerlink" title="GET方式提交"></a>GET方式提交</h2><p>   a）地址栏（URI）会跟上参数数据。以？开头，多个参数之间以&amp;分割。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /day09/testMethod.html?name=eric&amp;password=123456 HTTP/1.1</span><br><span class="line">Host: localhost:8080</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:35.0) Gecko/20100101 Firefox/35.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-cn,en-us;q=0.8,zh;q=0.5,en;q=0.3</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Referer: http://localhost:8080/day09/testMethod.html</span><br><span class="line">Connection: keep-alive</span><br></pre></td></tr></table></figure></p><p>b）GET提交参数数据有限制，不超过1KB。<br>c）GET方式不适合提交敏感密码。<br>d）注意： 浏览器直接访问的请求，默认提交方式是GET方式</p><h2 id="POST方式提交"><a href="#POST方式提交" class="headerlink" title="POST方式提交"></a>POST方式提交</h2><p>a）参数不会跟着URI后面。参数而是跟在请求的实体内容中。没有？开头，多个参数之间以&amp;分割。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST /day09/testMethod.html HTTP/1.1</span><br><span class="line">Host: localhost:8080</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:35.0) Gecko/20100101 Firefox/35.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-cn,en-us;q=0.8,zh;q=0.5,en;q=0.3</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Referer: http://localhost:8080/day09/testMethod.html</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">name=eric&amp;password=123456</span><br></pre></td></tr></table></figure><p>b）POST提交的参数数据没有限制。<br>c）POST方式提交敏感数据。</p><h1 id="接口测试的方法"><a href="#接口测试的方法" class="headerlink" title="接口测试的方法"></a>接口测试的方法</h1><p>至于接口测试具体的测试方法，http协议的接口测试，一般会用jmeter去测试，jmeter的好处是不用写测试代码，直接使用jmeter提供的http请求去测试，也可以使用postman，也可以使用HttpClient去测试，好处是可以方便集成和自动化。java接口的测试，则需要编写测试代码去测试，有点类似于单元测试。<br>　　但是以上的方法都只是通过发送Request，返回Respouse，简单的验证返回值是否正确，它的缺点很多：　　　　</p><ul><li>它不能将请求参数完全的覆盖，只是简单的覆盖几个参数</li><li>手动的一条一条伪造自测数据</li><li>对于复杂类型的请求参数，例如javaBean对象，无法发送</li><li>不能自动化的判断返回值是否正确</li><li>需要手工一条一条去执行接口，效率太低</li></ul><p>基于以上缺点，github上有很多同学做了各种不同的接口框架，比如百度的iTest，阿里taobao etao测试团队开发的TOAST，网易的Dagger，但是上述框架都是基于自己公司的业务基础设计开发的，只供参考，我自己设计了一套接口测试框架 ，暂且命名为ITester，详细介绍请看下一篇博文。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文为CharliChen原创文章，转载请注明出处！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本系列教材将主要为大家讲解接口测试框架的设计，本框架属于轻量型的，目前的需求基本都能满足，后续还要不断的完善，最后开源出去。暂且命名为ITester（
      
    
    </summary>
    
      <category term="测试开发" scheme="http://yoursite.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="接口测试" scheme="http://yoursite.com/tags/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Android 性能数据采集（概要）</title>
    <link href="http://yoursite.com/2016/12/10/Android%20%E6%80%A7%E8%83%BD%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%EF%BC%88%E6%A6%82%E8%A6%81%EF%BC%89/"/>
    <id>http://yoursite.com/2016/12/10/Android 性能数据采集（概要）/</id>
    <published>2016-12-10T13:03:45.000Z</published>
    <updated>2018-05-01T12:27:55.294Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文为CharliChen原创文章，转载请注明出处！！</p></blockquote><h1 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h1><blockquote><p>  adb shell dumpsys cpuinfo |grep packageName     &gt;/address/cpu.txt</p></blockquote><p>大家看第一个应用CPU占用率68%，这个过程是在用户（user）中花61%的时间，并在内核空间（kernel）花费7.1%的时间。</p><p>或者：</p><blockquote><p> adb shell top |grep packagename&gt;/address/cpu.txt </p></blockquote><hr><h1 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h1><h2 id="1-内存耗用："><a href="#1-内存耗用：" class="headerlink" title="1. 内存耗用："></a>1. 内存耗用：</h2><p>VSS - Virtual Set Size 虚拟耗用内存（包含共享库占用的内存）<br>RSS - Resident Set Size 实际使用物理内存（包含共享库占用的内存）<br>PSS - Proportional Set Size 实际使用的物理内存（比例分配共享库占用的内存）<br>USS - Unique Set Size 进程独自占用的物理内存（不包含共享库占用的内存）</p><p>1.空闲状态下的应用内存消耗情况<br>2.中等规格状态下的应用内存消耗情况<br>3.满规格状态下的应用内存消耗情况<br>4.应用内存峰值情况<br>5.应用内存泄露情况<br>6.应用是否常驻内存<br>7.压力测试后的内存使用情况</p><h2 id="2-内存问题："><a href="#2-内存问题：" class="headerlink" title="2. 内存问题："></a>2. 内存问题：</h2><ul><li>内存抖动</li></ul><p>大量的对象在短时间创建和释放，频繁触发GC，造成UI卡顿； 避免在循环体中new对象 String 和StringBuffer例子 避免在FrameCallback.doFrame()方法中new对象 重用对象 e.g 字符串拼接使用StringBuff</p><ul><li>内存泄露 OOM</li></ul><p>程序中一些对象不再使用，但是一直被该对象的引用所持有，导致GC无法回收。<br>Activity泄露：Activity Drawable<br>Fragment泄露</p><h2 id="3-内存采集方式："><a href="#3-内存采集方式：" class="headerlink" title="3. 内存采集方式："></a>3. 内存采集方式：</h2><p>1.使用 android 本身提供的 ActivityManager.MemoryInfo() 方法获得（此方法请百度或google）此类第三方工具有如网易的Emmagee、安测试、腾讯的GT等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">private void GetMemory() &#123;</span><br><span class="line"></span><br><span class="line">final ActivityManager activityManager = (ActivityManager) getSystemService(ACTIVITY_SERVICE);    </span><br><span class="line"></span><br><span class="line">ActivityManager.MemoryInfo info = new ActivityManager.MemoryInfo();   </span><br><span class="line"></span><br><span class="line">activityManager.getMemoryInfo(info);    </span><br><span class="line"></span><br><span class="line">Log.i(tag,&quot;系统剩余内存:&quot;+(info.availMem &gt;&gt; 10)+&quot;k&quot;);   </span><br><span class="line"></span><br><span class="line">Log.i(tag,&quot;系统是否处于低内存运行：&quot;+info.lowMemory);</span><br><span class="line"></span><br><span class="line">Log.i(tag,&quot;当系统剩余内存低于&quot;+info.threshold+&quot;时就看成低内存运行&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>availMem:表示系统剩余内存</p><p>lowMemory：它是boolean值，表示系统是否处于低内存运行</p><p>hreshold：它表示当系统剩余内存低于好多时就看成低内存运行</p><p>我用过以上三种最多，其实Top 也可以 还有很多方法都可以。</p><p>2.使用 android 提供的 adb shell dumpsys 命令来获取</p><blockquote><p> adb shell dumpsys meminfo |grep packagename &gt;/address/mem.txt </p></blockquote><p>3.使用 android 提供的 procrank<br>首先去google获取procrank、procmem、libpagemap.so 三个文件 ；</p><p>然后push文件，执行 </p><blockquote><p>adb push procrank /system/xbin adb push procmem /system/xbin adb push libpagemap.so /system/lib</p></blockquote><p>赋权</p><blockquote><p>adb shell chmod 6755 /system/xbin/procrank adb shell chmod 6755 /system/xbin/procmem adb shell chmod 6755 /system/lib/libpagemap.so</p></blockquote><p>在开启工具记录</p><blockquote><p> adb shell procrank |grep packagename &gt;/address/procrank.txt</p></blockquote><p>对于内存的限制 是 dalvik heap不能超过最大限制，跟Native heap没有关系。</p><hr><h1 id="流量"><a href="#流量" class="headerlink" title="流量"></a>流量</h1><p>流量测试包括以下测试项：</p><ul><li>应用首次启动流量提示</li><li>应用后台连续运行 2 小时的流量值</li><li>应用高负荷运行的流量峰值</li><li>应用中等负荷运行时的流量均值</li></ul><p>1.<br>adb shell cat /proc/“+Pid+”/net/dev”</p><p>这边的wlan0代表wifi 上传下载量标识! 上传下载量单位是字节可以/1024换算成KB<br>这里可以看到下载的字节数 、数据包 和 发送的字节数 、数据包<br>小技巧：wlan0这些值如何初始化0 很简单 你打开手机飞行模式再关掉就清0了</p><p>2.<br>通过直接读取android系统上的两个文件的内容：<br>Proc/uid_stat/{UID}/tcp_snd和tcp_rcv，其中UID是每个app安装时分配的唯一编号用于识别该app，tcp_snd中的数据表示法术的数据累计大小，单位是字节，tcp_rcv表示接收到的数据累计大小。</p><p>(1)首先获取app的PID：<br>adb shell ps |grep packageName<br>(2)然后获取app的UID<br>adb shell cat /proc/“+Pid+”/status<br>(3)获取到应用的起始的接收及发送的流量<br>adb shell cat /proc/uid_stat/+”UID”/tcp_rcv<br>adb shell cat /proc/uid_stat/+”UID”/tcp_snd<br>然后我们再操作应用，再次通过上述 2 条命令可以获取到应用的结束的接收及发送的流量，通过相减及得到应用的整体流量消耗</p><hr><h1 id="电量"><a href="#电量" class="headerlink" title="电量"></a>电量</h1><p>功耗测试主要从以下几个方面入手进行测试</p><p>测试手机安装目标APK前后待机功耗无明显差异<br>常见使用场景中能够正常进入待机，待机电流在正常范围内.<br>长时间连续使用应用无异常耗电现象</p><p>测试方法<br>第一种基于android提供的PowerManager.WakeLock来进行，<br>第二种比较复杂一点，功耗的计算=CPU消耗+Wake lock消耗+数据传输消耗+GPS消耗+Wi-Fi连接消耗，<br>第三种通过 adb shell dumpsys battery来获取</p><hr><h1 id="启动时长"><a href="#启动时长" class="headerlink" title="启动时长"></a>启动时长</h1><p>Android性能测试-启动时间：</p><p>首先我们来说说启动时间。关于应用的启动时间的测试，分为三类：</p><p>1） 首次启动 –应用首次启动所花费的时间<br>2） 非首次启动 –应用非首次启动所花费的时间<br>3） 应用界面切换–应用界面内切换所花费的时间</p><p>那么如何来做启动时间的测试呢，一般我们分为2类，一类为使用软件来测试，可能大部分人都比较通晓使用android 提供的 DisplayManager 来获取 activity 的启动时间。通过日志过滤关键字 Displayed 来过滤所有 activity 所打印的，记录日志通过。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文为CharliChen原创文章，转载请注明出处！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;CPU&quot;&gt;&lt;a href=&quot;#CPU&quot; class=&quot;headerlink&quot; title=&quot;CPU&quot;&gt;&lt;/a&gt;CPU&lt;/h1&gt;&lt;blockq
      
    
    </summary>
    
      <category term="测试开发" scheme="http://yoursite.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="专项测试" scheme="http://yoursite.com/tags/%E4%B8%93%E9%A1%B9%E6%B5%8B%E8%AF%95/"/>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>BeanUtils组件 学习笔记</title>
    <link href="http://yoursite.com/2016/12/07/BeanUtils%E7%BB%84%E4%BB%B6%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/12/07/BeanUtils组件 学习笔记/</id>
    <published>2016-12-07T14:52:29.000Z</published>
    <updated>2018-05-01T12:09:54.208Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文为CharliChen原创文章，转载请注明出处！！</p></blockquote><h2 id="一：BeanUtils组件简介"><a href="#一：BeanUtils组件简介" class="headerlink" title="一：BeanUtils组件简介"></a>一：BeanUtils组件简介</h2><h3 id="1-什么是BeanUtils"><a href="#1-什么是BeanUtils" class="headerlink" title="1.什么是BeanUtils"></a>1.什么是BeanUtils</h3><p>程序中对javabean的操作很频繁， 所以apache提供了一套开源的api，方便对javabean的操作，即BeanUtils组件。</p><h3 id="2-BeanUtils的作用"><a href="#2-BeanUtils的作用" class="headerlink" title="2.BeanUtils的作用"></a>2.BeanUtils的作用</h3><p>简化javabean的操作。<br>在一般的写bean组件的时候，都必须要写setter和getter方法，当然假如我们事先已经知道bean的相关属性和方法，写bean是比较简单的。</p><h3 id="3-BeanUtils依赖包"><a href="#3-BeanUtils依赖包" class="headerlink" title="3.BeanUtils依赖包"></a>3.BeanUtils依赖包</h3><p>用户可以从<a href="http://www.apache.org下载BeanUtils组件，然后再在项目中引入jar文件。" target="_blank" rel="noopener">www.apache.org下载BeanUtils组件，然后再在项目中引入jar文件。</a></p><p>(1)   BeanUtils相关包<br>commons-beanutils-1.8.3.jar<br>commons-beanutils-1.8.3-javadoc.jar<br>commons-beanutils-1.8.3-javadoc.jar<br>commons-beanutils-bean-collections-1.8.3.jar<br>commons-beanutils-core-1.8.3.jar</p><p>(2)   Logic4j相关包<br>commons-logging.jar<br>log4j.jar</p><p>注：如果缺少日志jar文件，报错：</p><blockquote><p>java.lang.NoClassDefFoundError: org/apache/commons/logging/LogFactory<br>    at org.apache.commons.beanutils.ConvertUtilsBean.<init>(ConvertUtilsBean.java:157)<br>    at org.apache.commons.beanutils.BeanUtilsBean.<init>(BeanUtilsBean.java:117)<br>    at org.apache.commons.beanutils.BeanUtilsBean$1.initialValue(BeanUtilsBean.java:68)<br>    at </init></init></p></blockquote><hr><h2 id="二：实例—基本用法"><a href="#二：实例—基本用法" class="headerlink" title="二：实例—基本用法"></a>二：实例—基本用法</h2><ul><li><p>用法1： 对象属性的拷贝</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BeanUtils.copyProperty(admin, &quot;userName&quot;, &quot;jack&quot;);</span><br><span class="line">BeanUtils.setProperty(admin, &quot;age&quot;, 18);</span><br></pre></td></tr></table></figure></li><li><p>用法2：对象的拷贝</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BeanUtils.copyProperties(newAdmin, admin);</span><br></pre></td></tr></table></figure><ul><li>用法3： map数据拷贝到javabean中<br>注意：map中的key要与javabean的属性名称一致</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BeanUtils.populate(adminMap, map);</span><br></pre></td></tr></table></figure><h3 id="代码举例"><a href="#代码举例" class="headerlink" title="代码举例"></a>代码举例</h3><ul><li>javabean类</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">package com.beanutils.test;</span><br><span class="line"></span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 1. bean类设计</span><br><span class="line"> * @author Charlie.chen</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class Admin &#123;</span><br><span class="line"></span><br><span class="line">private int id;</span><br><span class="line">private String userName;</span><br><span class="line">private String pwd;</span><br><span class="line">private int age;</span><br><span class="line">private Date birth;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public Date getBirth() &#123;</span><br><span class="line">return birth;</span><br><span class="line">&#125;</span><br><span class="line">public void setBirth(Date birth) &#123;</span><br><span class="line">this.birth = birth;</span><br><span class="line">&#125;</span><br><span class="line">public int getAge() &#123;</span><br><span class="line">return age;</span><br><span class="line">&#125;</span><br><span class="line">public void setAge(int age) &#123;</span><br><span class="line">this.age = age;</span><br><span class="line">&#125;</span><br><span class="line">public String getPwd() &#123;</span><br><span class="line">return pwd;</span><br><span class="line">&#125;</span><br><span class="line">public void setPwd(String pwd) &#123;</span><br><span class="line">this.pwd = pwd;</span><br><span class="line">&#125;</span><br><span class="line">public int getId() &#123;</span><br><span class="line">return id;</span><br><span class="line">&#125;</span><br><span class="line">public void setId(int id) &#123;</span><br><span class="line">this.id = id;</span><br><span class="line">&#125;</span><br><span class="line">public String getUserName() &#123;</span><br><span class="line">return userName;</span><br><span class="line">&#125;</span><br><span class="line">public void setUserName(String userName) &#123;</span><br><span class="line">this.userName = userName;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public String toString() &#123;</span><br><span class="line">return &quot;Admin [age=&quot; + age + &quot;, birth=&quot; + birth + &quot;, id=&quot; + id</span><br><span class="line">+ &quot;, pwd=&quot; + pwd + &quot;, userName=&quot; + userName + &quot;]&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过BeanUtils对javabean的基本操作</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test1() throws Exception &#123;</span><br><span class="line"></span><br><span class="line">// a. 基本操作</span><br><span class="line">Admin admin = new Admin();</span><br><span class="line">//admin.setUserName(&quot;Charlie.chen&quot;);</span><br><span class="line">//admin.setPwd(&quot;999&quot;);</span><br><span class="line"></span><br><span class="line">// b. BeanUtils组件实现对象属性的拷贝</span><br><span class="line">BeanUtils.copyProperty(admin, &quot;userName&quot;, &quot;jack&quot;);</span><br><span class="line">BeanUtils.setProperty(admin, &quot;age&quot;, 18);</span><br><span class="line"></span><br><span class="line">// 总结1： 对于基本数据类型，会自动进行类型转换!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// c. 对象的拷贝</span><br><span class="line">Admin newAdmin = new Admin();</span><br><span class="line">BeanUtils.copyProperties(newAdmin, admin);</span><br><span class="line"></span><br><span class="line">// d. map数据，拷贝到对象中</span><br><span class="line">Admin adminMap = new Admin();</span><br><span class="line">Map&lt;String,Object&gt; map = new HashMap&lt;String,Object&gt;();</span><br><span class="line">map.put(&quot;userName&quot;, &quot;Jerry&quot;);</span><br><span class="line">map.put(&quot;age&quot;, 29);</span><br><span class="line">// 注意：map中的key要与javabean的属性名称一致</span><br><span class="line">BeanUtils.populate(adminMap, map);</span><br><span class="line"></span><br><span class="line">// 测试</span><br><span class="line">System.out.println(adminMap.getUserName());</span><br><span class="line">System.out.println(adminMap.getAge());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="三：实例—日期类型的拷贝"><a href="#三：实例—日期类型的拷贝" class="headerlink" title="三：实例—日期类型的拷贝"></a>三：实例—日期类型的拷贝</h2><p><strong>需要注册日期类型转换器，2种方式参见下面代码：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">//1.自定义日期类型转换器</span><br><span class="line">@Test</span><br><span class="line">public void test2() throws Exception &#123;</span><br><span class="line">// 模拟表单数据</span><br><span class="line">String name = &quot;jack&quot;;</span><br><span class="line">String age = &quot;20&quot;;</span><br><span class="line">String birth = &quot;   &quot;;</span><br><span class="line"></span><br><span class="line">// 对象</span><br><span class="line">Admin admin = new Admin();</span><br><span class="line">// 注册日期类型转换器：1， 自定义的方式</span><br><span class="line">ConvertUtils.register(new Converter() &#123;</span><br><span class="line">// 转换的内部实现方法，需要重写</span><br><span class="line">@Override</span><br><span class="line">public Object convert(Class type, Object value) &#123;</span><br><span class="line"></span><br><span class="line">// 判断</span><br><span class="line">if (type != Date.class) &#123;</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line">if (value == null || &quot;&quot;.equals(value.toString().trim())) &#123;</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">// 字符串转换为日期</span><br><span class="line">SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</span><br><span class="line">return sdf.parse(value.toString());</span><br><span class="line">&#125; catch (ParseException e) &#123;</span><br><span class="line">throw new RuntimeException(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,Date.class);</span><br><span class="line"></span><br><span class="line">// 把表单提交的数据，封装到对象中</span><br><span class="line">BeanUtils.copyProperty(admin, &quot;userName&quot;, name);</span><br><span class="line">BeanUtils.copyProperty(admin, &quot;age&quot;, age);</span><br><span class="line">BeanUtils.copyProperty(admin, &quot;birth&quot;, birth);</span><br><span class="line"></span><br><span class="line">//------ 测试------</span><br><span class="line">System.out.println(admin);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//2. 使用提供的日期类型转换器工具类</span><br><span class="line">@Test</span><br><span class="line">public void test3() throws Exception &#123;</span><br><span class="line">// 模拟表单数据</span><br><span class="line">String name = &quot;jack&quot;;</span><br><span class="line">String age = &quot;20&quot;;</span><br><span class="line">String birth = null;</span><br><span class="line">// 对象</span><br><span class="line">Admin admin = new Admin();</span><br><span class="line"></span><br><span class="line">// 注册日期类型转换器：2， 使用组件提供的转换器工具类</span><br><span class="line">ConvertUtils.register(new DateLocaleConverter(), Date.class);</span><br><span class="line"></span><br><span class="line">// 把表单提交的数据，封装到对象中</span><br><span class="line">BeanUtils.copyProperty(admin, &quot;userName&quot;, name);</span><br><span class="line">BeanUtils.copyProperty(admin, &quot;age&quot;, age);</span><br><span class="line">BeanUtils.copyProperty(admin, &quot;birth&quot;, birth);</span><br><span class="line"></span><br><span class="line">//------ 测试------</span><br><span class="line">System.out.println(admin);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文为CharliChen原创文章，转载请注明出处！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一：BeanUtils组件简介&quot;&gt;&lt;a href=&quot;#一：BeanUtils组件简介&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
      <category term="测试开发" scheme="http://yoursite.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java数据库连接池 学习笔记</title>
    <link href="http://yoursite.com/2016/12/06/Java%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/12/06/Java数据库连接池 学习笔记/</id>
    <published>2016-12-06T15:12:39.000Z</published>
    <updated>2018-05-01T12:10:30.070Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文为CharliChen原创文章，转载请注明出处！！</p></blockquote><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>对于一个简单的数据库应用，由于对于数据库的访问不是很频繁。这时可以简单地在需要访问数据库时，就新创建一个连接，用完后就关闭它，这样做也不会带来什么明显的性能上的开销。但是对于一个复杂的数据库应用，情况就完全不同了。频繁的建立、关闭连接，会极大的减低系统的性能，因此对于连接的使用成了系统性能的瓶颈。</p><p>正是由于以上原因，数据库连接池技术出现了！！</p><blockquote><p>数据库连接池负责分配,管理和释放数据库连接,它允许应用程序重复使用一个现有的数据库连接,而不是重新建立一个。</p></blockquote><p>数据库连接池在初始化时将创建一定数量的数据库连接放到连接池中, 这些数据库连接的数量是由最小数据库连接数来设定的.无论这些数据库连接是否被使用,连接池都将一直保证至少拥有这么多的连接数量.连接池的最大数据库连接数量限定了这个连接池能占有的最大连接数,当应用程序向连接池请求的连接数超过最大连接数量时,这些请求将被加入到等待队列中。</p><hr><h1 id="数据库连接池优点："><a href="#数据库连接池优点：" class="headerlink" title="数据库连接池优点："></a>数据库连接池优点：</h1><p>1． 资源重用</p><p>由于数据库连接得到重用，避免了频繁创建、释放连接引起的大量性能开销。在减少系统消耗的基础上，另一方面也增进了系统运行环境的平稳性（减少内存碎片以及数据库临时进程/线程的数量）。</p><p>2． 更快的系统响应速度</p><p>数据库连接池在初始化过程中，往往已经创建了若干数据库连接置于池中备用。此时连接的初始化工作均已完成。对于业务请求处理而言，直接利用现有可用连接，避免了数据库连接初始化和释放过程的时间开销，从而缩减了系统整体响应时间。</p><p>3． 新的资源分配手段</p><p>对于多应用共享同一数据库的系统而言，可在应用层通过数据库连接的配置，实现数据库连接池技术，几年钱也许还是个新鲜话题，对于目前的业务系统而言，如果设计中还没有考虑到连接池的应用，那么…….快在设计文档中加上这部分的内容吧。某一应用最大可用数据库连接数的限制，避免某一应用独占所有数据库资源。</p><p>4． 统一的连接管理，避免数据库连接泄漏</p><p>在较为完备的数据库连接池实现中，可根据预先的连接占用超时设定，强制收回被占用连接。从而避免了常规数据库连接操作中可能出现的资源泄漏。</p><hr><h1 id="数据库连接池技术实现"><a href="#数据库连接池技术实现" class="headerlink" title="数据库连接池技术实现"></a>数据库连接池技术实现</h1><p>目前数据库连接池技术实现常见有三种方式</p><ul><li>自定义数据库连接池</li><li>DBCP连接池</li><li>C3P0连接池</li></ul><h2 id="方式一：自定义数据库连接池"><a href="#方式一：自定义数据库连接池" class="headerlink" title="方式一：自定义数据库连接池"></a>方式一：自定义数据库连接池</h2><p><strong>程序实现思路</strong><br>1.指定“初始化连接数目” （App启动时，就执行创建）<br>2.指定“最大连接数”<br>3.指定“当前使用连接数” （不能超出最大连接数）</p><p><strong>代码实现思路</strong><br>1.MyPool.java 连接池<br>2.指定全局变量：初始化数目，最大连接数，当前连接数，连接池集合<br>3.构造方法：循环创建3个连接<br>4.写一个创建连接的方法<br>5.获取连接<br>     判断：池中有连接，直接连<br>           池中没有连接，判断是否达到最大的连接数：达到，抛出异常；没有达到，创建新连接<br>6.释放连接，连接池放回集合中</p><p><strong>代理</strong><br>    如果对某个接口中的某个指定的方法的功能进行扩展，而不想实现接口里所有方法，可以使用(动态)代理模式!<br>    Java中代理模式：静态/动态/Cglib代理(spring)<br>    使用动态代理，可以监测接口中方法的执行！</p><p>如何对Connection对象，生成一个代理对象：<br>|–Proxy<br>    static Object newProxyInstance(<br>ClassLoader loader,    当前使用的类加载器<br>Class<t>[] interfaces,   目标对象(Connection)实现的接口类型<br>InvocationHandler h    事件处理器：当执行上面接口中的方法的时候，就会自动触发事件处理器代码，把当前执行的方法(method)作为参数传入。<br>)  </t></p><p><strong>详细代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 自定义连接池, 管理连接</span><br><span class="line"> * 代码实现：</span><br><span class="line">1.  MyPool.java  连接池类，   </span><br><span class="line">2.  指定全局参数：  初始化数目、最大连接数、当前连接、   连接池集合</span><br><span class="line">3.  构造函数：循环创建3个连接</span><br><span class="line">4.  写一个创建连接的方法</span><br><span class="line">5.  获取连接</span><br><span class="line">------&gt;  判断： 池中有连接， 直接拿</span><br><span class="line"> ------&gt;                池中没有连接，</span><br><span class="line">------&gt;                 判断，是否达到最大连接数； 达到，抛出异常；没有达到最大连接数，</span><br><span class="line">创建新的连接</span><br><span class="line">6. 释放连接</span><br><span class="line"> -------&gt;  连接放回集合中(..)</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class MyPool &#123;</span><br><span class="line"></span><br><span class="line">private int init_count = 3;// 初始化连接数目</span><br><span class="line">private int max_count = 6;// 最大连接数</span><br><span class="line">private int current_count = 0;  // 记录当前使用连接数</span><br><span class="line">// 连接池 （存放所有的初始化连接）</span><br><span class="line">private LinkedList&lt;Connection&gt; pool = new LinkedList&lt;Connection&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//1.  构造函数中，初始化连接放入连接池</span><br><span class="line">public MyPool() &#123;</span><br><span class="line">// 初始化连接</span><br><span class="line">for (int i=0; i&lt;init_count; i++)&#123;</span><br><span class="line">// 记录当前连接数目</span><br><span class="line">current_count++;</span><br><span class="line">// 创建原始的连接对象</span><br><span class="line">Connection con = createConnection();</span><br><span class="line">// 把连接加入连接池</span><br><span class="line">pool.addLast(con);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//2. 创建一个新的连接的方法</span><br><span class="line">private Connection createConnection()&#123;</span><br><span class="line">try &#123;</span><br><span class="line">Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">// 原始的目标对象</span><br><span class="line">final Connection con = DriverManager.getConnection(&quot;jdbc:mysql:///jdbc_demo&quot;, &quot;root&quot;, &quot;root&quot;);</span><br><span class="line"></span><br><span class="line">/**********对con对象代理**************/</span><br><span class="line"></span><br><span class="line">// 对con创建其代理对象</span><br><span class="line">Connection proxy = (Connection) Proxy.newProxyInstance(</span><br><span class="line"></span><br><span class="line">con.getClass().getClassLoader(),    // 类加载器</span><br><span class="line">//con.getClass().getInterfaces(),   // 当目标对象是一个具体的类的时候 </span><br><span class="line">new Class[]&#123;Connection.class&#125;,      // 目标对象实现的接口</span><br><span class="line"></span><br><span class="line">new InvocationHandler() &#123;// 当调用con对象方法的时候， 自动触发事务处理器</span><br><span class="line">@Override</span><br><span class="line">public Object invoke(Object proxy, Method method, Object[] args)</span><br><span class="line">throws Throwable &#123;</span><br><span class="line">// 方法返回值</span><br><span class="line">Object result = null;</span><br><span class="line">// 当前执行的方法的方法名</span><br><span class="line">String methodName = method.getName();</span><br><span class="line"></span><br><span class="line">// 判断当执行了close方法的时候，把连接放入连接池</span><br><span class="line">if (&quot;close&quot;.equals(methodName)) &#123;</span><br><span class="line">System.out.println(&quot;begin:当前执行close方法开始！&quot;);</span><br><span class="line">// 连接放入连接池</span><br><span class="line">pool.addLast(con);</span><br><span class="line">System.out.println(&quot;end: 当前连接已经放入连接池了！&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">// 调用目标对象方法</span><br><span class="line">result = method.invoke(con, args);</span><br><span class="line">&#125;</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line">return proxy;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">throw new RuntimeException(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//3. 获取连接</span><br><span class="line">public Connection getConnection()&#123;</span><br><span class="line"></span><br><span class="line">// 3.1 判断连接池中是否有连接, 如果有连接，就直接从连接池取出</span><br><span class="line">if (pool.size() &gt; 0)&#123;</span><br><span class="line">return pool.removeFirst();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 3.2 连接池中没有连接： 判断，如果没有达到最大连接数，创建；</span><br><span class="line">if (current_count &lt; max_count) &#123;</span><br><span class="line">// 记录当前使用的连接数</span><br><span class="line">current_count++;</span><br><span class="line">// 创建连接</span><br><span class="line">return createConnection();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 3.3 如果当前已经达到最大连接数，抛出异常</span><br><span class="line">throw new RuntimeException(&quot;当前连接已经达到最大连接数目 ！&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//4. 释放连接</span><br><span class="line">public void realeaseConnection(Connection con) &#123;</span><br><span class="line">// 4.1 判断： 池的数目如果小于初始化连接，就放入池中</span><br><span class="line">if (pool.size() &lt; init_count)&#123;</span><br><span class="line">pool.addLast(con);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">try &#123;</span><br><span class="line">// 4.2 关闭 </span><br><span class="line">current_count--;</span><br><span class="line">con.close();</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">throw new RuntimeException(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws SQLException &#123;</span><br><span class="line">MyPool pool = new MyPool();</span><br><span class="line">System.out.println(&quot;当前连接: &quot; + pool.current_count);  // 3</span><br><span class="line"></span><br><span class="line">// 使用连接</span><br><span class="line">pool.getConnection();</span><br><span class="line">pool.getConnection();</span><br><span class="line">Connection con4 = pool.getConnection();</span><br><span class="line">Connection con3 = pool.getConnection();</span><br><span class="line">Connection con2 = pool.getConnection();</span><br><span class="line">Connection con1 = pool.getConnection();</span><br><span class="line"></span><br><span class="line">// 释放连接, 连接放回连接池</span><br><span class="line">//pool.realeaseConnection(con1);</span><br><span class="line">/*</span><br><span class="line"> * 希望：当关闭连接的时候，要把连接放入连接池！【当调用Connection接口的close方法时候，希望触发pool.addLast(con);操作】</span><br><span class="line"> * 把连接放入连接池</span><br><span class="line"> * 解决1：实现Connection接口，重写close方法</span><br><span class="line"> * 解决2：动态代理</span><br><span class="line"> */</span><br><span class="line">con1.close();</span><br><span class="line"></span><br><span class="line">// 再获取</span><br><span class="line">pool.getConnection();</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;连接池：&quot; + pool.pool.size());      // 0</span><br><span class="line">System.out.println(&quot;当前连接: &quot; + pool.current_count);  // 3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="方式二：DBCP连接池"><a href="#方式二：DBCP连接池" class="headerlink" title="方式二：DBCP连接池"></a>方式二：DBCP连接池</h2><p>DBCP 是 Apache 软件基金组织下的开源连接池实现，使用DBCP数据源，应用程序应在系统中增加如下两个 jar 文件：</p><ul><li>Commons-dbcp.jar：连接池的实现</li><li>Commons-pool.jar：连接池实现的依赖库</li></ul><p>Tomcat 的连接池正是采用该连接池来实现的。该数据库连接池既可以与应用服务器整合使用，也可由应用程序独立使用。核心类：BasicDataSource</p><p> <strong>详细代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class App_DBCP &#123;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">// 配置方式实现连接池,便于维护</span><br><span class="line">public void testProp() throws Exception &#123;</span><br><span class="line">// 加载prop配置文件</span><br><span class="line">Properties prop = new Properties();</span><br><span class="line">// 获取文件流</span><br><span class="line">InputStream inStream = App_DBCP.class.getResourceAsStream(&quot;db.properties&quot;);</span><br><span class="line">// 加载属性配置文件</span><br><span class="line">prop.load(inStream);</span><br><span class="line">// 根据prop配置，直接创建数据源对象</span><br><span class="line">DataSource dataSouce = BasicDataSourceFactory.createDataSource(prop);</span><br><span class="line"></span><br><span class="line">// 获取连接</span><br><span class="line">Connection con = dataSouce.getConnection();</span><br><span class="line">con.prepareStatement(&quot;delete from admin where id=4&quot;).executeUpdate();</span><br><span class="line">// 关闭</span><br><span class="line">con.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件db.properties</p><ul><li>url=jdbc:mysql:///jdbc_demo<br>driverClassName=com.mysql.jdbc.Driver<br>username=root<br>password=root<br>initialSize=3<br>maxActive=6<br>maxIdle=3000</li></ul><hr><h2 id="方式三：C3P0连接池"><a href="#方式三：C3P0连接池" class="headerlink" title="方式三：C3P0连接池"></a>方式三：C3P0连接池</h2><p>C3P0连接池，最常用的连接池技术！Spring框架，默认支持C3P0连接池技术！<br>C3P0连接池的核心jar包</p><ul><li>c3p0-0.9.1.2.jar</li></ul><p>核心类：CombopooledDataSource </p><p><strong>实现步骤：</strong></p><ol><li>下载，引入jar文件:  c3p0-0.9.1.2.jar</li><li>使用连接池，创建连接<br>a)    硬编码方式<br>b)    配置方式(xml)</li></ol><p><strong>具体代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class App &#123;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">//XML配置方式，使用C3P0连接池管理连接</span><br><span class="line">public void testXML() throws Exception &#123;</span><br><span class="line">// 创建c3p0连接池核心工具类</span><br><span class="line">// 自动加载src下c3p0的配置文件【c3p0-config.xml】</span><br><span class="line">ComboPooledDataSource dataSource = new ComboPooledDataSource();// 使用默认的配置</span><br><span class="line"></span><br><span class="line">// 获取连接</span><br><span class="line">Connection con = dataSource.getConnection();</span><br><span class="line">// 执行更新</span><br><span class="line">con.prepareStatement(&quot;delete from admin where id=5&quot;).executeUpdate();</span><br><span class="line">// 关闭</span><br><span class="line">con.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件c3p0-config.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;c3p0-config&gt;</span><br><span class="line">&lt;default-config&gt;</span><br><span class="line">&lt;property name=&quot;jdbcUrl&quot;&gt;jdbc:mysql://localhost:3306/jdbc_demo</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;driverClass&quot;&gt;com.mysql.jdbc.Driver&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;user&quot;&gt;root&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;password&quot;&gt;root&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;initialPoolSize&quot;&gt;3&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;maxPoolSize&quot;&gt;6&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;maxIdleTime&quot;&gt;1000&lt;/property&gt;</span><br><span class="line">&lt;/default-config&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;named-config name=&quot;oracle_config&quot;&gt;</span><br><span class="line">&lt;property name=&quot;jdbcUrl&quot;&gt;jdbc:mysql://localhost:3306/jdbc_demo&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;driverClass&quot;&gt;com.mysql.jdbc.Driver&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;user&quot;&gt;root&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;password&quot;&gt;root&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;initialPoolSize&quot;&gt;3&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;maxPoolSize&quot;&gt;6&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;maxIdleTime&quot;&gt;1000&lt;/property&gt;</span><br><span class="line">&lt;/named-config&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/c3p0-config&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文为CharliChen原创文章，转载请注明出处！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;对于一个简单的数
      
    
    </summary>
    
      <category term="测试开发" scheme="http://yoursite.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Java通过JDBC 进行Dao层的封装</title>
    <link href="http://yoursite.com/2016/12/05/Java%E9%80%9A%E8%BF%87JDBC%20%E8%BF%9B%E8%A1%8CDao%E5%B1%82%E7%9A%84%E5%B0%81%E8%A3%85/"/>
    <id>http://yoursite.com/2016/12/05/Java通过JDBC 进行Dao层的封装/</id>
    <published>2016-12-05T14:22:45.000Z</published>
    <updated>2018-05-01T12:05:31.401Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文为CharliChen原创文章，转载请注明出处！！</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前面有一章节，我专门讲解了<a href="http://blog.csdn.net/tobetheender/article/details/52772157" target="_blank" rel="noopener">Java通过JDBC 进行MySQL数据库操作</a>，这主要讲解了MySQL数据库的连接和简单的操作，但是在真正的java项目中，我们要不断的和数据库打交道，为了提高数据库操作的执行效率和增加代码的复用性，将重新封装一个Dao层，也就是数据访问层 ，用来访问数据库实现数据的持久化。</p><h2 id="Dao层设计"><a href="#Dao层设计" class="headerlink" title="Dao层设计"></a>Dao层设计</h2><p>###Dao层操作通用的步骤：</p><ul><li>1.写SQL语句</li><li>2.获取连接</li><li>3.创建stmt</li><li>4.执行sql</li></ul><blockquote><p>a)更新<br>String sql = “delete from admin where id=?””;<br>String sql = “insert into admin (userName,pwd) values (?,?)”<br>public void update(String sql, Object[]  paramValues);</p></blockquote><blockquote><p>b)查询<br>String sql = “select <em> from admin”;<br>String sql = “select </em> from admin  where  id=?  And pwd =?”;<br>// 传入的什么类型的对象，就封装为什么类型<br>// 要求： 列的名称，要与指定类型的对象的属性名称一样<br>Public    List<t>    query  (String sql , Object[] paramValues ,  Class<t> clazz);<br>T  t;  // 对象赋值</t></t></p></blockquote><ul><li>5.关闭/异常</li></ul><h3 id="编写BaseDao，自己写的所有的Dao都继承此类"><a href="#编写BaseDao，自己写的所有的Dao都继承此类" class="headerlink" title="编写BaseDao，自己写的所有的Dao都继承此类"></a>编写BaseDao，自己写的所有的Dao都继承此类</h3><p>其中JDBCUtil类在上篇博文<a href="http://blog.csdn.net/tobetheender/article/details/52772157" target="_blank" rel="noopener">Java通过JDBC 进行MySQL数据库操作</a>中有详细介绍，这里就比说了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 通用的dao，自己写的所有的dao都继承此类;</span><br><span class="line"> * 此类定义了2个通用的方法：</span><br><span class="line"> * 1. 更新</span><br><span class="line"> *  2. 查询</span><br><span class="line"> * @author Charlie.chen</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class BaseDao &#123;</span><br><span class="line"></span><br><span class="line">// 初始化参数</span><br><span class="line">private Connection con;</span><br><span class="line">private PreparedStatement pstmt;</span><br><span class="line">private ResultSet rs;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 查询的通用方法</span><br><span class="line"> * @param sql</span><br><span class="line"> * @param paramsValue</span><br><span class="line"> */</span><br><span class="line">public &lt;T&gt; List&lt;T&gt; query(String sql, Object[] paramsValue,Class&lt;T&gt; clazz)&#123;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">// 返回的集合</span><br><span class="line">List&lt;T&gt; list = new ArrayList&lt;T&gt;();</span><br><span class="line">// 对象</span><br><span class="line">T t = null;</span><br><span class="line"></span><br><span class="line">// 1. 获取连接</span><br><span class="line">con = JdbcUtil.getConnection();</span><br><span class="line">// 2. 创建stmt对象</span><br><span class="line">pstmt = con.prepareStatement(sql);</span><br><span class="line">// 3. 获取占位符参数的个数， 并设置每个参数的值</span><br><span class="line">int count = pstmt.getParameterMetaData().getParameterCount();</span><br><span class="line">if (paramsValue != null &amp;&amp; paramsValue.length &gt; 0) &#123;</span><br><span class="line">for (int i=0; i&lt;paramsValue.length; i++) &#123;</span><br><span class="line">pstmt.setObject(i+1, paramsValue[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// 4. 执行查询</span><br><span class="line">rs = pstmt.executeQuery();</span><br><span class="line">// 5. 获取结果集元数据</span><br><span class="line">ResultSetMetaData rsmd = rs.getMetaData();</span><br><span class="line">// ---&gt; 获取列的个数</span><br><span class="line">int columnCount = rsmd.getColumnCount();</span><br><span class="line"></span><br><span class="line">// 6. 遍历rs</span><br><span class="line">while (rs.next()) &#123;</span><br><span class="line">// 要封装的对象</span><br><span class="line">t = clazz.newInstance();</span><br><span class="line"></span><br><span class="line">// 7. 遍历每一行的每一列, 封装数据</span><br><span class="line">for (int i=0; i&lt;columnCount; i++) &#123;</span><br><span class="line">// 获取每一列的列名称</span><br><span class="line">String columnName = rsmd.getColumnName(i + 1);</span><br><span class="line">// 获取每一列的列名称, 对应的值</span><br><span class="line">Object value = rs.getObject(columnName);</span><br><span class="line">// 封装： 设置到t对象的属性中  【BeanUtils组件】</span><br><span class="line">BeanUtils.copyProperty(t, columnName, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 把封装完毕的对象，添加到list集合中</span><br><span class="line">list.add(t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return list;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">throw new RuntimeException(e);</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">JdbcUtil.closeAll(con, pstmt, rs);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 更新的通用方法</span><br><span class="line"> * @param sql   更新的sql语句(update/insert/delete)</span><br><span class="line"> * @param paramsValue  sql语句中占位符对应的值(如果没有占位符，传入null)</span><br><span class="line"> */</span><br><span class="line">public void update(String sql,Object[] paramsValue)&#123;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">// 获取连接</span><br><span class="line">con = JdbcUtil.getConnection();</span><br><span class="line">// 创建执行命令的stmt对象</span><br><span class="line">pstmt = con.prepareStatement(sql);</span><br><span class="line">// 参数元数据： 得到占位符参数的个数</span><br><span class="line">int count = pstmt.getParameterMetaData().getParameterCount();</span><br><span class="line"></span><br><span class="line">// 设置占位符参数的值</span><br><span class="line">if (paramsValue != null &amp;&amp; paramsValue.length &gt; 0) &#123;</span><br><span class="line">// 循环给参数赋值</span><br><span class="line">for(int i=0;i&lt;count;i++) &#123;</span><br><span class="line">pstmt.setObject(i+1, paramsValue[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// 执行更新</span><br><span class="line">pstmt.executeUpdate();</span><br><span class="line"></span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">throw new RuntimeException(e);</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">JdbcUtil.closeAll(con, pstmt, null);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="编写实际操作的Dao类继承自BaseDao"><a href="#编写实际操作的Dao类继承自BaseDao" class="headerlink" title="编写实际操作的Dao类继承自BaseDao"></a>编写实际操作的Dao类继承自BaseDao</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public class AdminDao extends BaseDao &#123;</span><br><span class="line"></span><br><span class="line">// 删除</span><br><span class="line">public void delete(int id) &#123;</span><br><span class="line">String sql = &quot;delete from admin where id=?&quot;;</span><br><span class="line">Object[] paramsValue = &#123;id&#125;;</span><br><span class="line">super.update(sql, paramsValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 插入</span><br><span class="line">public void insert(Admin admin) &#123;</span><br><span class="line">String sql = &quot;insert into admin (userName,pwd) values (?,?)&quot;;</span><br><span class="line">Object[] paramsValue = &#123;admin.getUserName(),admin.getPwd()&#125;;</span><br><span class="line">super.update(sql, paramsValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 查询全部</span><br><span class="line">public List&lt;Admin&gt; getAll()&#123;</span><br><span class="line">String sql = &quot;select * from admin&quot;;</span><br><span class="line">List&lt;Admin&gt; list = super.query(sql, null, Admin.class);</span><br><span class="line">return list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 根据条件查询(主键)</span><br><span class="line">public Admin findById(int id)&#123;</span><br><span class="line">String sql = &quot;select * from admin where id=?&quot;;</span><br><span class="line">List&lt;Admin&gt; list = super.query(sql, new Object[]&#123;id&#125;, Admin.class);</span><br><span class="line">return  (list!=null&amp;&amp;list.size()&gt;0) ? list.get(0) : null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JavaBean类"><a href="#JavaBean类" class="headerlink" title="JavaBean类"></a>JavaBean类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 1. bean类设计</span><br><span class="line"> * @author Charlie.chen</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class Admin &#123;</span><br><span class="line"></span><br><span class="line">    private int id;</span><br><span class="line">    private String userName;</span><br><span class="line">    private String pwd;</span><br><span class="line">    private int age;</span><br><span class="line">    private Date birth;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public Date getBirth() &#123;</span><br><span class="line">        return birth;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setBirth(Date birth) &#123;</span><br><span class="line">        this.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getPwd() &#123;</span><br><span class="line">        return pwd;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setPwd(String pwd) &#123;</span><br><span class="line">        this.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getUserName() &#123;</span><br><span class="line">        return userName;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setUserName(String userName) &#123;</span><br><span class="line">        this.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Admin [age=&quot; + age + &quot;, birth=&quot; + birth + &quot;, id=&quot; + id</span><br><span class="line">                + &quot;, pwd=&quot; + pwd + &quot;, userName=&quot; + userName + &quot;]&quot;;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文为CharliChen原创文章，转载请注明出处！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前面有一章节，我
      
    
    </summary>
    
      <category term="测试开发" scheme="http://yoursite.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Java通过JDBC 进行MySQL数据库操作</title>
    <link href="http://yoursite.com/2016/12/05/Java%E9%80%9A%E8%BF%87JDBC%20%E8%BF%9B%E8%A1%8CMySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2016/12/05/Java通过JDBC 进行MySQL数据库操作/</id>
    <published>2016-12-05T05:12:10.000Z</published>
    <updated>2018-05-01T12:04:30.084Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文为CharliChen原创文章，转载请注明出处！！</p></blockquote><h2 id="一：前言"><a href="#一：前言" class="headerlink" title="一：前言"></a>一：前言</h2><p>在测试工作中难免会和数据库打交道，可能大家对数据库语句都比较熟，比如常见的增删改查等，但是当我们在做自动化测试时，比如接口测试，大部分请求参数，可能都是从数据库中取值，并且接口返回值最后都会记录在数据库中，这样前提就需要和数据库建立连接，才能进行读写操作。</p><hr><h2 id="二：JDBC是什么"><a href="#二：JDBC是什么" class="headerlink" title="二：JDBC是什么"></a>二：JDBC是什么</h2><p><strong>java提供了一个API也就是JDBC（Java Data Base Connectivity)，可以为多种关系数据库提供统一访问和操作，它由一组用Java语言编写的类和接口组成。</strong></p><ul><li>没有jdbc之前<br>java开发人员需要维护不同的数据库的驱动程序，如果数据库的底层实现改变，驱动程序可能会随之改变！！</li></ul><p><img src="http://img.blog.csdn.net/20161015193028849" alt="这里写图片描述"></p><ul><li>有了jdbc之后：<br>java开发人员只需维护java应用和一套规范，也就是jdbc接口。数据库厂商提供具体的java驱动程序，数据库厂商的底层实现改变，厂商随之更新驱动程序，而不影响java应用程序！！</li></ul><p><img src="http://img.blog.csdn.net/20161015193227040" alt="这里写图片描述"></p><hr><h2 id="三：实现步骤"><a href="#三：实现步骤" class="headerlink" title="三：实现步骤"></a>三：实现步骤</h2><ol><li><p>导入数据包<br>需要包括含有需要进行数据库编程的JDBC类的包。大多数情况下，使用 import java.sql.*  就可以了.</p></li><li><p>添加JDBC驱动程序包<br> 添加jar程序驱动包<a href="http://www.mysql.com/downloads/connector/j，初始化驱动程序，可以与数据库打开一个通信通道。" target="_blank" rel="noopener">http://www.mysql.com/downloads/connector/j，初始化驱动程序，可以与数据库打开一个通信通道。</a></p></li><li><p>打开数据库连接<br>需要使用DriverManager.getConnection() 方法创建一个Connection对象，它代表与数据库的物理连接。</p></li><li><p>执行数据库操作<br> 需要使用类型声明的对象建立并提交一个SQL语句到数据库。</p></li><li><p>从结果集中提取数据<br> 要求使用适当的关于ResultSet.getXXX()方法来检索结果集的数据。</p></li><li><p>清理环境<br>需要明确地关闭所有的数据库资源相对依靠JVM的垃圾收集。</p></li></ol><h3 id="JDBCUtil类"><a href="#JDBCUtil类" class="headerlink" title="JDBCUtil类"></a>JDBCUtil类</h3><ul><li><p><strong>主程序</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line">package com.jdbc;</span><br><span class="line"></span><br><span class="line">//导入数据包</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.DriverManager;</span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.sql.Statement;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author Charlie.chen</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class JDBCUtil&#123;</span><br><span class="line"></span><br><span class="line">// 驱动包名和数据库url</span><br><span class="line">private static String url = null;</span><br><span class="line">private static String driverClass = null;</span><br><span class="line">// 数据库用户名和密码</span><br><span class="line">private static String userName = null;</span><br><span class="line">private static String password = null;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 初始化驱动程序</span><br><span class="line"> * 静态代码块中（只加载一次）</span><br><span class="line"> */</span><br><span class="line">static&#123;</span><br><span class="line">try &#123;</span><br><span class="line">//读取db.properties文件</span><br><span class="line">Properties prop = new Properties();</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 使用类路径的读取方式</span><br><span class="line"> *  / : 斜杠表示classpath的根目录</span><br><span class="line"> *     在java项目下，classpath的根目录从bin目录开始</span><br><span class="line"> *     在web项目下，classpath的根目录从WEB-INF/classes目录开始</span><br><span class="line"> */</span><br><span class="line">InputStream in = JDBCUtil.class.getResourceAsStream(&quot;/db.properties&quot;);</span><br><span class="line"></span><br><span class="line">//加载文件</span><br><span class="line">prop.load(in);</span><br><span class="line">//读取信息</span><br><span class="line">url = prop.getProperty(&quot;url&quot;);</span><br><span class="line">driverClass = prop.getProperty(&quot;driverClass&quot;);</span><br><span class="line">userName = prop.getProperty(&quot;user&quot;);</span><br><span class="line">password = prop.getProperty(&quot;password&quot;);</span><br><span class="line"></span><br><span class="line">//注册驱动程序</span><br><span class="line">Class.forName(driverClass);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">System.out.println(&quot;驱程程序注册出错&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 打开数据库驱动连接</span><br><span class="line"> */</span><br><span class="line">public static Connection getConnection()&#123;</span><br><span class="line">try &#123;</span><br><span class="line">Connection conn = DriverManager.getConnection(url, userName, password);</span><br><span class="line">return conn;</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">throw new RuntimeException(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 清理环境，关闭连接(顺序:后打开的先关闭)</span><br><span class="line"> */</span><br><span class="line">public static void close(Connection conn,Statement stmt,ResultSet rs)&#123;</span><br><span class="line">if(rs!=null)</span><br><span class="line">try &#123;</span><br><span class="line">rs.close();</span><br><span class="line">&#125; catch (SQLException e1) &#123;</span><br><span class="line">e1.printStackTrace();</span><br><span class="line">throw new RuntimeException(e1);</span><br><span class="line">&#125;</span><br><span class="line">if(stmt!=null)&#123;</span><br><span class="line">try &#123;</span><br><span class="line">stmt.close();</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">throw new RuntimeException(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if(conn!=null)&#123;</span><br><span class="line">try &#123;</span><br><span class="line">conn.close();</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">throw new RuntimeException(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">   </span><br><span class="line">   Connection conn = null;</span><br><span class="line">   Statement stmt = null;</span><br><span class="line">   ResultSet rs = null;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   conn=JDBCUtil.getConnection();</span><br><span class="line">   try &#123;</span><br><span class="line">stmt=conn.createStatement();</span><br><span class="line"> //准备sql操作语句</span><br><span class="line">String sql= &quot;SELECT id, first, last, age FROM YourDBName&quot;;</span><br><span class="line">rs = stmt.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">//从结果集中提取数据</span><br><span class="line">while(rs.next())&#123;</span><br><span class="line">         int id  = rs.getInt(&quot;id&quot;);</span><br><span class="line">         int age = rs.getInt(&quot;age&quot;);</span><br><span class="line">         String first = rs.getString(&quot;first&quot;);</span><br><span class="line">         String last = rs.getString(&quot;last&quot;);</span><br><span class="line"></span><br><span class="line">         System.out.print(&quot;ID: &quot; + id);</span><br><span class="line">         System.out.print(&quot;, Age: &quot; + age);</span><br><span class="line">         System.out.print(&quot;, First: &quot; + first);</span><br><span class="line">         System.out.println(&quot;, Last: &quot; + last);</span><br><span class="line">&#125;</span><br><span class="line">  &#125; catch (SQLException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">  &#125;finally&#123;</span><br><span class="line">  JDBCUtil.close(conn, stmt, rs);</span><br><span class="line">  &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>JDBC配置文件db.properties</strong></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url=jdbc:mysql://localhost/yourDBName</span><br><span class="line">user=root</span><br><span class="line">password=root</span><br><span class="line">driverClass=com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure><hr><p>##四：JDBC核心API<br> JDBC接口核心的API</p><ul><li>java.sql.* </li><li>javax.sql.*</li></ul><pre><code>|- Driver接口： 表示java驱动程序接口。所有的具体的数据库厂商要来实现此接口。    |- connect(url, properties):  连接数据库的方法。            url: 连接数据库的URL                 URL语法： jdbc协议:数据库子协议://主机:端口/数据库                user： 数据库的用户名                password： 数据库用户密码|- DriverManager类： 驱动管理器类，用于管理所有注册的驱动程序    |-registerDriver(driver)  : 注册驱动类对象    |-Connection getConnection(url,user,password);  获取连接对象|- Connection接口： 表示java程序和数据库的连接对象。        |- Statement createStatement() ： 创建Statement对象        |- PreparedStatement prepareStatement(String sql)  创建PreparedStatement对象        |- CallableStatement prepareCall(String sql) 创建CallableStatement对象|- Statement接口： 用于执行静态的sql语句        |- int executeUpdate(String sql)  ： 执行静态的更新sql语句（DDL，DML）        |- ResultSet executeQuery(String sql)  ：执行的静态的查询sql语句（DQL）    |-PreparedStatement接口：用于执行预编译sql语句            |- int executeUpdate() ： 执行预编译的更新sql语句（DDL，DML）            |-ResultSet executeQuery()  ： 执行预编译的查询sql语句（DQL）    |-CallableStatement接口：用于执行存储过程的sql语句（call xxx）                |-ResultSet executeQuery()  ： 调用存储过程的方法|- ResultSet接口：用于封装查询出来的数据        |- boolean next() ： 将光标移动到下一行        |-getXX() : 获取列的值</code></pre><hr><h2 id="五：常见的SQL执行语句"><a href="#五：常见的SQL执行语句" class="headerlink" title="五：常见的SQL执行语句"></a>五：常见的SQL执行语句</h2><pre><code>String sql = &quot;CREATE TABLE student(id INT PRIMARY KEY AUTO_INCREMENT,NAME VARCHAR(20),gender VARCHAR(2))&quot;;//发送sql语句，执行sql语句,得到返回结果int count = stmt.executeUpdate(sql);String sql = &quot;SELECT * FROM student&quot;;//执行sqlResultSet rs = stmt.executeQuery(sql);String sql = &quot;INSERT INTO student(NAME,gender) VALUES(&apos;李四&apos;,&apos;女&apos;)&quot;;int count = stmt.executeUpdate(sql);String sql = &quot;UPDATE student SET NAME=&apos;&quot;+name+&quot;&apos; WHERE id=&quot;+id+&quot;&quot;;String sql = &quot;DELETE FROM student WHERE id=&quot;+id+&quot;&quot;;</code></pre><hr><h2 id="六：补充"><a href="#六：补充" class="headerlink" title="六：补充"></a>六：补充</h2><h3 id="数据库url制定"><a href="#数据库url制定" class="headerlink" title="数据库url制定"></a>数据库url制定</h3><p>当加载的驱动程序，可以建立程序中使用DriverManager.getConnection()方法的连接。为方便参考，让列出了三个重载DriverManager.getConnection()方法：</p><p>getConnection(String url)</p><p>getConnection(String url, Properties prop)</p><p>getConnection(String url, String user, String password)</p><p>在这里，每个表单需要一个数据库URL。数据库的URL是指向数据库地址。</p><p>制定一个数据库URL是大多数用在建立连接相关。<br>如图列出了下来流行的JDBC驱动程序名和数据库的URL。<br><img src="http://img.blog.csdn.net/20161012230516424" alt="这里写图片描述"></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p> <a href="http://www.yiibai.com/jdbc/jdbc-sample-code.html#" target="_blank" rel="noopener">http://www.yiibai.com/jdbc/jdbc-sample-code.html#</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文为CharliChen原创文章，转载请注明出处！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一：前言&quot;&gt;&lt;a href=&quot;#一：前言&quot; class=&quot;headerlink&quot; title=&quot;一：前言&quot;&gt;&lt;/a&gt;一：前言&lt;/h2&gt;&lt;p&gt;
      
    
    </summary>
    
      <category term="测试开发" scheme="http://yoursite.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>TestNG实现用例运行失败自动截图和重跑</title>
    <link href="http://yoursite.com/2016/12/03/TestNG%E5%AE%9E%E7%8E%B0%E7%94%A8%E4%BE%8B%E8%BF%90%E8%A1%8C%E5%A4%B1%E8%B4%A5%E8%87%AA%E5%8A%A8%E6%88%AA%E5%9B%BE%E5%92%8C%E9%87%8D%E8%B7%91/"/>
    <id>http://yoursite.com/2016/12/03/TestNG实现用例运行失败自动截图和重跑/</id>
    <published>2016-12-03T10:44:10.000Z</published>
    <updated>2018-05-01T11:55:49.718Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文为CharliChen原创文章，转载请注明出处！！</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在前面我的自动化测试框架系列文章中，有一个知识点没有讲到，现在补上。<br>在运行自动测试脚本时，经常会需要增加失败时自动截图的功能，以及失败重跑功能，下面介绍一下通过监听器的方式来实现自动截图和重跑功能。</p><h1 id="失败自动截图功能"><a href="#失败自动截图功能" class="headerlink" title="失败自动截图功能"></a>失败自动截图功能</h1><h3 id="1-定义一个截图工具类：ScreenShot"><a href="#1-定义一个截图工具类：ScreenShot" class="headerlink" title="1. 定义一个截图工具类：ScreenShot"></a>1. 定义一个截图工具类：ScreenShot</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">package com.dji.utils;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.io.FileUtils;</span><br><span class="line">import org.openqa.selenium.OutputType;</span><br><span class="line"></span><br><span class="line">import io.appium.java_client.AppiumDriver;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 截图并保存至本地</span><br><span class="line"> * </span><br><span class="line"> * @author Charlie.chen</span><br><span class="line"> */</span><br><span class="line">public class ScreenShot &#123;</span><br><span class="line"></span><br><span class="line">private AppiumDriver&lt;?&gt; driver;</span><br><span class="line">// 测试失败截屏保存的路径</span><br><span class="line">private String path;</span><br><span class="line">public LogUtil log=new LogUtil(this.getClass());</span><br><span class="line"></span><br><span class="line">public ScreenShot(AppiumDriver&lt;?&gt; driver)&#123;</span><br><span class="line">this.driver=driver;</span><br><span class="line">path=System.getProperty(&quot;user.dir&quot;)+ &quot;//snapshot//&quot;+ this.getClass().getSimpleName()+&quot;_&quot;+getCurrentTime() + &quot;.png&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void getScreenShot() &#123;</span><br><span class="line"></span><br><span class="line">File screen = driver.getScreenshotAs(OutputType.FILE);</span><br><span class="line">File screenFile = new File(path);</span><br><span class="line">try &#123;</span><br><span class="line">FileUtils.copyFile(screen, screenFile);</span><br><span class="line">log.info(&quot;截图保存的路径:&quot; + path);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">log.error(&quot;截图失败&quot;);</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 获取当前时间</span><br><span class="line"> */</span><br><span class="line">public String getCurrentTime()&#123;</span><br><span class="line">Date date=new Date();</span><br><span class="line">SimpleDateFormat sdf=new SimpleDateFormat(&quot;yyyy-MM-dd HH-mm-ss&quot;);</span><br><span class="line">String currentTime=sdf.format(date);</span><br><span class="line">return currentTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getPath() &#123;</span><br><span class="line">return path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setPath(String path) &#123;</span><br><span class="line">this.path = path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-新建一个Java类继承TestListenerAdapter"><a href="#2-新建一个Java类继承TestListenerAdapter" class="headerlink" title="2. 新建一个Java类继承TestListenerAdapter"></a>2. 新建一个Java类继承TestListenerAdapter</h3><p>在TestNG中TestListenerAdapter为监听器类，共有如下主要方法：</p><ul><li>onTestFailure</li><li>onTestSuccess</li><li>onTestSuccess</li><li>onTestStart</li><li>onFinish</li></ul><p>要想实现用例运行失败自动截图，只需新建一个类TestNGListener继承TestListenerAdapter，然后重写onTestFailure、onTestSkipped等方法，在这些方法中加入截图操作即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">package com.dji.utils;</span><br><span class="line"></span><br><span class="line">import org.testng.ITestContext;</span><br><span class="line">import org.testng.ITestResult;</span><br><span class="line">import org.testng.TestListenerAdapter;</span><br><span class="line"></span><br><span class="line">import io.appium.java_client.AppiumDriver;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * testNG执行case 失败后 ，testNG Listener会捕获执行失败</span><br><span class="line"> * 如果要实现失败自动截图，需要重写Listener的onTestFailure方法</span><br><span class="line"> * </span><br><span class="line"> * @author Charlie.chen</span><br><span class="line"> */</span><br><span class="line">public class TestNGListener extends TestListenerAdapter &#123;</span><br><span class="line"></span><br><span class="line">private static AppiumDriver&lt;?&gt; driver;</span><br><span class="line"></span><br><span class="line">LogUtil log = new LogUtil(this.getClass());</span><br><span class="line"></span><br><span class="line">public static void setDriver(AppiumDriver&lt;?&gt; driver) &#123;</span><br><span class="line">TestNGListener.driver = driver;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onTestSuccess(ITestResult tr) &#123;</span><br><span class="line">log.info(&quot;Test Success&quot;);</span><br><span class="line">super.onTestSuccess(tr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onTestFailure(ITestResult tr) &#123;</span><br><span class="line">log.error(&quot;Test Failure&quot;);</span><br><span class="line">super.onTestFailure(tr);</span><br><span class="line"></span><br><span class="line">ScreenShot screenShot = new ScreenShot(driver);</span><br><span class="line">screenShot.getScreenShot();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onTestSkipped(ITestResult tr) &#123;</span><br><span class="line">log.error(&quot;Test Skipped&quot;);</span><br><span class="line">super.onTestSkipped(tr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onStart(ITestContext testContext) &#123;</span><br><span class="line">log.info(&quot;Test Start&quot;);</span><br><span class="line">super.onStart(testContext);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onFinish(ITestContext testContext) &#123;</span><br><span class="line">log.info(&quot;Test Finish&quot;);</span><br><span class="line">super.onFinish(testContext);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-在testng-xml文件中配置自己编写的监听器类"><a href="#3-在testng-xml文件中配置自己编写的监听器类" class="headerlink" title="3. 在testng.xml文件中配置自己编写的监听器类"></a>3. 在testng.xml文件中配置自己编写的监听器类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;listeners&gt;</span><br><span class="line">&lt;listener class-name=&quot;com.dji.utils.TestNGListener&quot; /&gt;</span><br><span class="line">&lt;/listeners&gt;</span><br></pre></td></tr></table></figure><hr><p>完成以上三步即可！！！</p><p><img src="http://img.blog.csdn.net/20160927205652964" alt="这里写图片描述"></p><hr><h1 id="失败自动重跑功能"><a href="#失败自动重跑功能" class="headerlink" title="失败自动重跑功能"></a>失败自动重跑功能</h1><h3 id="1-新建TestNGRetry类，实现用例失败自动重跑逻辑"><a href="#1-新建TestNGRetry类，实现用例失败自动重跑逻辑" class="headerlink" title="1. 新建TestNGRetry类，实现用例失败自动重跑逻辑"></a>1. 新建TestNGRetry类，实现用例失败自动重跑逻辑</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package com.dji.utils;</span><br><span class="line"></span><br><span class="line">import org.testng.IRetryAnalyzer;</span><br><span class="line">import org.testng.ITestResult;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 用例失败自动重跑逻辑</span><br><span class="line"> * @author Charlie.chen</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class TestNGRetry implements IRetryAnalyzer &#123;</span><br><span class="line">public LogUtil log = new LogUtil(this.getClass());</span><br><span class="line">private int retryCount = 0;</span><br><span class="line">private int maxRetryCount=2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public boolean retry(ITestResult result) &#123;</span><br><span class="line">if (retryCount &lt;= maxRetryCount) &#123;</span><br><span class="line">String message = &quot;running retry for  &apos;&quot; + result.getName() + &quot;&apos; on class &quot; + </span><br><span class="line">                                       this.getClass().getName() + &quot; Retrying &quot; + retryCount + &quot; times&quot;;</span><br><span class="line">log.info(message);</span><br><span class="line">retryCount++;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-添加用例重跑监听器RetryListener，用例失败自动重跑功能"><a href="#2-添加用例重跑监听器RetryListener，用例失败自动重跑功能" class="headerlink" title="2. 添加用例重跑监听器RetryListener，用例失败自动重跑功能"></a>2. 添加用例重跑监听器RetryListener，用例失败自动重跑功能</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package com.dji.utils;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Constructor;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line">import org.testng.IAnnotationTransformer;</span><br><span class="line">import org.testng.IRetryAnalyzer;</span><br><span class="line">import org.testng.annotations.ITestAnnotation;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 添加用例重跑监听器，用例失败自动重跑功能</span><br><span class="line"> * </span><br><span class="line"> * @author Charlie.chen</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class RetryListener implements IAnnotationTransformer &#123;</span><br><span class="line">    public void transform(ITestAnnotation annotation, Class testClass, Constructor testConstructor, Method testMethod) &#123;</span><br><span class="line">        IRetryAnalyzer retry = annotation.getRetryAnalyzer();</span><br><span class="line">        if (retry == null) &#123;</span><br><span class="line">            annotation.setRetryAnalyzer(TestNGRetry.class);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-在testng-xml文件中配置自己编写的监听器"><a href="#3-在testng-xml文件中配置自己编写的监听器" class="headerlink" title="3. 在testng.xml文件中配置自己编写的监听器"></a>3. 在testng.xml文件中配置自己编写的监听器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;listeners&gt;</span><br><span class="line">&lt;listener class-name=&quot;com.dji.utils.TestNGListener&quot; /&gt;</span><br><span class="line">&lt;listener class-name=&quot;com.dji.utils.RetryListener&quot;/&gt;</span><br><span class="line">&lt;/listeners&gt;</span><br></pre></td></tr></table></figure><h3 id="4-进一步改进"><a href="#4-进一步改进" class="headerlink" title="4. 进一步改进"></a>4. 进一步改进</h3><p>以上三步就搞定用例失败重跑的功能了，但是最后我们查看testng报告时，发现失败的用例在报告里生成了多份，显然这样不好，那怎么解决呢？<br><img src="http://img.blog.csdn.net/20160928163349572" alt="这里写图片描述"></p><p>我们来更改第一部分自动截图中说到的TestNGListener监听器类，重写onFinish方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void onFinish(ITestContext testContext) &#123;</span><br><span class="line">log.info(&quot;Test Finish&quot;);</span><br><span class="line"></span><br><span class="line">       Iterator&lt;ITestResult&gt; listOfFailedTests = testContext.getFailedTests().getAllResults().iterator();</span><br><span class="line">       while (listOfFailedTests.hasNext()) &#123;</span><br><span class="line">           ITestResult failedTest = listOfFailedTests.next();</span><br><span class="line">           ITestNGMethod method = failedTest.getMethod();</span><br><span class="line">           if (testContext.getFailedTests().getResults(method).size() &gt; 1) &#123;</span><br><span class="line">               listOfFailedTests.remove();</span><br><span class="line">           &#125; else &#123;</span><br><span class="line">               if (testContext.getPassedTests().getResults(method).size() &gt; 0) &#123;</span><br><span class="line">                   listOfFailedTests.remove();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文为CharliChen原创文章，转载请注明出处！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在前面我的自动化
      
    
    </summary>
    
      <category term="测试开发" scheme="http://yoursite.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="自动化测试" scheme="http://yoursite.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>UI层自动化测试框架（六）：持续集成和测试报告</title>
    <link href="http://yoursite.com/2016/12/01/UI%E5%B1%82%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%92%8C%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A/"/>
    <id>http://yoursite.com/2016/12/01/UI层自动化测试框架（六）：持续集成和测试报告/</id>
    <published>2016-12-01T05:31:20.000Z</published>
    <updated>2018-05-01T11:54:11.709Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文为CharliChen原创文章，转载请注明出处！！</p></blockquote><p>前面几章讲解了测试框架的结构和实现，接下来讲解如何实现测试框架的自动化和测试报告的生成。</p><h2 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h2><p>本框架我是采用Jenkins实现持续集成的，至于Jenkins环境的搭建和使用，我前面的blog有提到，如果大家不清楚的可以先去阅读我之前写的这篇文章，<a href="http://blog.csdn.net/tobetheender/article/details/52298583" target="_blank" rel="noopener">Jenkins安装和构建部署</a></p><ul><li><p>运行jenkins，首先创建一个job为appiumTurbo</p><p><img src="http://img.blog.csdn.net/20160913210338318" alt="这里写图片描述"></p></li><li><p>源码管理<br>将代码上传到github上进行托管，然后在jenkins上配置clone 到你本地或者远程的jenkins来：<br><img src="http://img.blog.csdn.net/20160913213358331" alt="这里写图片描述"></p></li><li><p>构建触发器<br>Poll SCM： 定时检查源码变更（根据SCM软件的版本号），如果有更新就checkout最新code下来，然后执行构建动作。Build periodically：周期进行项目构建（它不care源码是否发生变化），我的配置如下：<br>每天凌晨2：00进行一次构建</p></li></ul><p><img src="http://img.blog.csdn.net/20160913213817598" alt="这里写图片描述"></p><ul><li><p>构建</p><p><img src="http://img.blog.csdn.net/20160913213247424" alt="这里写图片描述"></p></li><li><p>构建后操作<br>发送邮件</p></li></ul><hr><h2 id="测试报告"><a href="#测试报告" class="headerlink" title="测试报告"></a>测试报告</h2><p>每次构建完成后都会生成一个测试报告，由于testng自带生成测试报告，但是这个报告比较丑陋，下面开始用ReportNG来生成漂亮简洁的测试报告。</p><ul><li>在maven项目中添加依赖，在pom.xml文件中添加以下依赖关系：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 依赖reportNg 关联testNg --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.uncommons&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;reportng&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.1.4&lt;/version&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;exclusions&gt;</span><br><span class="line">&lt;exclusion&gt;</span><br><span class="line">&lt;groupId&gt;org.testng&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;testng&lt;/artifactId&gt;</span><br><span class="line">&lt;/exclusion&gt;</span><br><span class="line">&lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 依赖Guice --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.google.inject&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;guice&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;3.0&lt;/version&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ul><li>配置maven-surefire-plugin并加入reportNG listenser</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">&lt;!-- 添加插件,关联testNg.xml,添加ReportNg的监听器，修改最后的TestNg的报告 --&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.18.1&lt;/version&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">&lt;suiteXmlFiles&gt;</span><br><span class="line">&lt;!-- &lt;suiteXmlFile&gt;res/$&#123;xmlFileName&#125;&lt;/suiteXmlFile&gt; --&gt;</span><br><span class="line">&lt;suiteXmlFile&gt;testng.xml&lt;/suiteXmlFile&gt;</span><br><span class="line">&lt;/suiteXmlFiles&gt;</span><br><span class="line"></span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;usedefaultlisteners&lt;/name&gt;</span><br><span class="line">&lt;value&gt;false&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;listener&lt;/name&gt;</span><br><span class="line">&lt;value&gt;org.uncommons.reportng.HTMLReporter,</span><br><span class="line">org.uncommons.reportng.JUnitXMLReporter&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;workingDirectory&gt;target/&lt;/workingDirectory&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure><ul><li>最后构建完成后，在target目录下创建了一个surefire-reports目录，打开它下面的html文件夹，打开indel.xml，就可以看到相对美观的报告形式了，类似如图：</li></ul><p><img src="http://img.blog.csdn.net/20160928151854269" alt="这里写图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文为CharliChen原创文章，转载请注明出处！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;前面几章讲解了测试框架的结构和实现，接下来讲解如何实现测试框架的自动化和测试报告的生成。&lt;/p&gt;
&lt;h2 id=&quot;持续集成&quot;&gt;&lt;a href=&quot;#持续
      
    
    </summary>
    
      <category term="测试开发" scheme="http://yoursite.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="自动化测试" scheme="http://yoursite.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>UI层自动化测试框架（五）：业务层和用例层</title>
    <link href="http://yoursite.com/2016/12/01/UI%E5%B1%82%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E4%B8%9A%E5%8A%A1%E5%B1%82%E5%92%8C%E7%94%A8%E4%BE%8B%E5%B1%82/"/>
    <id>http://yoursite.com/2016/12/01/UI层自动化测试框架（五）：业务层和用例层/</id>
    <published>2016-11-30T16:52:10.000Z</published>
    <updated>2018-05-01T11:52:44.757Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文为CharliChen原创文章，转载请注明出处！！</p></blockquote><h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><p>该层主要是App的各种业务操作，比如登录，遍历tab，下单等，也就是说把app中各项业务的操作都封装在业务层。比如说登录操作，我们把它封装一个类，登录的大致的流程是：首先是不是要找到登录入口（可能一个app有很多的入口），然后进入登录界面，输入用户名和密码，再点击登录按钮，这样一个完整的登录业务就算完成了。</p><p>可能你问我为什么要这么做呢？在测试脚本中直接写不就可以了，为什么要把它们分离出来？其实这样做的目的是为了最大程度让测试用例维护性降低。如果以后需求发生变化，比如登陆的逻辑中增加了验证码等，这时只用改业务层中的登录类就可以了，而用例层中的测试脚本并不用改。</p><p><img src="http://img.blog.csdn.net/20160913120721508" alt="这里写图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">以下为登录业务的代码：</span><br><span class="line"></span><br><span class="line">package com.dji.action;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line">import com.dji.object.BasePage;</span><br><span class="line">import io.appium.java_client.AppiumDriver;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 登录action</span><br><span class="line"> * @author charlie.chen</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class Login  &#123;</span><br><span class="line">   </span><br><span class="line"> private AppiumDriver&lt;?&gt; driver;</span><br><span class="line"></span><br><span class="line"> private BasePage loginPage=null;</span><br><span class="line"></span><br><span class="line">public Login(AppiumDriver&lt;?&gt; driver) &#123;</span><br><span class="line">this.driver = driver;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//通过登录按钮登录</span><br><span class="line">public void loginByButton(String userName,String pwd) throws Exception&#123;</span><br><span class="line">new BasePage(driver,&quot;menuPage&quot;).click(&quot;我&quot;);</span><br><span class="line">isLogined();</span><br><span class="line">new BasePage(driver,&quot;minePageNo&quot;).click(&quot;登录&quot;);</span><br><span class="line">login(userName,pwd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//通过DJI Store登录</span><br><span class="line">public void loginByStore(String email,String pwd) throws Exception&#123;</span><br><span class="line">isLogined();</span><br><span class="line">new BasePage(driver,&quot;minePageNo&quot;).click(&quot;DJI商城&quot;);</span><br><span class="line">login(email,pwd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 通过DJI Academy登录</span><br><span class="line">public void loginByAcademy(String email,String pwd) throws Exception&#123;</span><br><span class="line">isLogined();</span><br><span class="line">new BasePage(driver,&quot;minePageNo&quot;).click(&quot;DJI论坛&quot;);</span><br><span class="line">login(email,pwd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//判断是否已登录，如果已登录就先退出登录</span><br><span class="line">public void isLogined() throws Exception&#123;</span><br><span class="line">BasePage minePage=new BasePage(driver,&quot;minePage&quot;);</span><br><span class="line">boolean flag=minePage.isElementDisplayed(&quot;用户图像&quot;);</span><br><span class="line">if(flag)&#123;</span><br><span class="line">minePage.swipeToUp();</span><br><span class="line">driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);</span><br><span class="line">minePage.click(&quot;设置&quot;);</span><br><span class="line">loginOut();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//登录操作</span><br><span class="line">public  void login(String userName,String pwd) throws Exception &#123;</span><br><span class="line">loginPage=new BasePage(driver,&quot;loginPage&quot;);</span><br><span class="line">loginPage.type(&quot;登录输入账号框&quot;, userName);</span><br><span class="line">loginPage.type(&quot;登录输入密码框&quot;, pwd);</span><br><span class="line">loginPage.click(&quot;登录&quot;);</span><br><span class="line">driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//退出登录</span><br><span class="line">public void loginOut() throws Exception&#123;</span><br><span class="line">BasePage settingPage=new BasePage(driver,&quot;settingPage&quot;);</span><br><span class="line">settingPage.click(&quot;退出DJI账号&quot;);</span><br><span class="line">settingPage.click(&quot;确定&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="用例层"><a href="#用例层" class="headerlink" title="用例层"></a>用例层</h2><p>该层是实际的测试脚本，也就是调用业务层中的各项业务操作，然后增加验证，判定结果是否正确。</p><p>以下为登录用例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">package com.dji.cases;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line">import org.testng.annotations.AfterClass;</span><br><span class="line">import org.testng.annotations.AfterMethod;</span><br><span class="line">import org.testng.annotations.AfterTest;</span><br><span class="line">import org.testng.annotations.BeforeClass;</span><br><span class="line">import org.testng.annotations.BeforeMethod;</span><br><span class="line">import org.testng.annotations.BeforeTest;</span><br><span class="line">import org.testng.annotations.Listeners;</span><br><span class="line">import org.testng.annotations.Parameters;</span><br><span class="line">import org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line">import static org.assertj.core.api.Java6Assertions.*;</span><br><span class="line"></span><br><span class="line">import com.dji.action.Login;</span><br><span class="line">import com.dji.object.BasePage;</span><br><span class="line">import com.dji.utils.DriverFactory;</span><br><span class="line">import com.dji.utils.TestNGListener;</span><br><span class="line"></span><br><span class="line">import io.appium.java_client.android.AndroidDriver;</span><br><span class="line"></span><br><span class="line">@Listeners(&#123; TestNGListener.class &#125;)</span><br><span class="line">public class LoginTest &#123;</span><br><span class="line"></span><br><span class="line">private AndroidDriver&lt;?&gt; ad = null;</span><br><span class="line">private Login login = null;</span><br><span class="line"></span><br><span class="line">@Parameters(&#123; &quot;userName&quot;, &quot;pwd&quot; &#125;)</span><br><span class="line">@Test(description = &quot;通过登录按钮登录&quot;)</span><br><span class="line">public void loginByButton(String userName, String pwd) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">login.loginByButton(userName, pwd);</span><br><span class="line">ad.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);</span><br><span class="line">// 断言验证用户名是否正确</span><br><span class="line">//Assert.assertEquals(new BasePage(ad, &quot;minePage&quot;).findElement(&quot;用户名&quot;).getText(), &quot;charlie.chen&quot;);   //testNG自带的断言机制</span><br><span class="line">//采用AssertJ断言机制</span><br><span class="line">assertThat(new BasePage(ad, &quot;minePage&quot;).findElement(&quot;用户名&quot;).getText()).isEqualTo(&quot;charlie.chen&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Parameters(&#123; &quot;userName&quot;, &quot;pwd&quot; &#125;)</span><br><span class="line">@Test(description = &quot;通过DJI Store登录&quot;)</span><br><span class="line">public void loginByStore(String userName, String pwd) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">login.loginByStore(userName, pwd);</span><br><span class="line">ad.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Parameters(&#123; &quot;userName&quot;, &quot;pwd&quot; &#125;)</span><br><span class="line">@Test(description = &quot;通过DJI论坛登录&quot;)</span><br><span class="line">public void loginByAcademy(String userName, String pwd) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">login.loginByAcademy(userName, pwd);</span><br><span class="line">ad.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Parameters(&#123; &quot;userName&quot;, &quot;pwd&quot; &#125;)</span><br><span class="line">@Test(description = &quot;通过飞行记录登录&quot;)</span><br><span class="line">public void loginByFly(String userName, String pwd) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// /*</span><br><span class="line">// * 通过Skypixel关注登录</span><br><span class="line">// */</span><br><span class="line">// @Test</span><br><span class="line">// public void loginByAttention() throws Exception &#123;</span><br><span class="line">// &#125;</span><br><span class="line">//</span><br><span class="line">// /*</span><br><span class="line">// * 通过Skypixel点赞登录</span><br><span class="line">// */</span><br><span class="line">// @Test</span><br><span class="line">// public void loginByPraise() throws Exception &#123;</span><br><span class="line">// &#125;</span><br><span class="line">//</span><br><span class="line">// /*</span><br><span class="line">// * 通过Skypixel收藏登录</span><br><span class="line">// */</span><br><span class="line">// @Test</span><br><span class="line">// public void loginByCollect() throws Exception &#123;</span><br><span class="line">// &#125;</span><br><span class="line">//</span><br><span class="line">// /*</span><br><span class="line">// * 通过Skypixel评论登录</span><br><span class="line">// */</span><br><span class="line">// @Test</span><br><span class="line">// public void loginByComment() throws Exception &#123;</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">@BeforeMethod</span><br><span class="line">public void beforeMethod() throws Exception &#123;</span><br><span class="line">login = new Login(ad);</span><br><span class="line">TestNGListener.setDriver(ad);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@AfterMethod</span><br><span class="line">public void afterMethod() throws Exception &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@BeforeClass</span><br><span class="line">public void beforeClass() &#123;</span><br><span class="line"></span><br><span class="line">ad = DriverFactory.createAndroidDriver(&quot;PBV0216615001449&quot;, &quot;4723&quot;, &quot;dji.pilot&quot;, &quot;dji.pilot.main.activity.DJIAoaActivity&quot;); </span><br><span class="line">ad.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@AfterClass</span><br><span class="line">public void afterClass() &#123;</span><br><span class="line">// ad.closeApp();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@BeforeTest()</span><br><span class="line">public void beforeTest() throws Exception &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@AfterTest</span><br><span class="line">public void afterTest() &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>testng.xml文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE suite SYSTEM &quot;http://testng.org/testng-1.0.dtd&quot; &gt;</span><br><span class="line">&lt;suite name=&quot;appiumPRO&quot; parallel=&quot;false&quot; preserve-order=&quot;true&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;parameter name=&quot;port&quot; value=&quot;4723&quot; /&gt;</span><br><span class="line">&lt;parameter name=&quot;udid&quot; value=&quot;PBV0216615001449&quot; /&gt;</span><br><span class="line">&lt;parameter name=&quot;appPackage&quot; value=&quot;dji.pilot&quot; /&gt;</span><br><span class="line">&lt;parameter name=&quot;appActivity&quot; value=&quot;dji.pilot.main.activity.DJIAoaActivity&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;parameter name=&quot;userName&quot; value=&quot;charlie.chen@dji.com&quot; /&gt;</span><br><span class="line">&lt;parameter name=&quot;pwd&quot; value=&quot;1weefdsew&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;test name=&quot;LoginTest&quot; preserve-order=&quot;true&quot;&gt;</span><br><span class="line">&lt;classes&gt;</span><br><span class="line">&lt;class name=&quot;com.dji.cases.LoginTest&quot; &gt;</span><br><span class="line">&lt;methods&gt;</span><br><span class="line">&lt;include name=&quot;loginByButton&quot; /&gt;</span><br><span class="line">&lt;include name=&quot;loginByStore&quot; /&gt;</span><br><span class="line">&lt;exclude name=&quot;loginByAcademy&quot; /&gt;</span><br><span class="line">&lt;exclude name=&quot;loginByFly&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;exclude name=&quot;loginByAttention&quot; /&gt;</span><br><span class="line">&lt;exclude name=&quot;loginByPraise&quot; /&gt;</span><br><span class="line">&lt;exclude name=&quot;loginByCollect&quot; /&gt;</span><br><span class="line">&lt;exclude name=&quot;loginByComment&quot; /&gt;</span><br><span class="line">&lt;/methods&gt;</span><br><span class="line">&lt;/class&gt;</span><br><span class="line">&lt;/classes&gt;</span><br><span class="line">&lt;/test&gt;</span><br><span class="line"></span><br><span class="line">&lt;/suite&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文为CharliChen原创文章，转载请注明出处！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;业务层&quot;&gt;&lt;a href=&quot;#业务层&quot; class=&quot;headerlink&quot; title=&quot;业务层&quot;&gt;&lt;/a&gt;业务层&lt;/h2&gt;&lt;p&gt;该层主要
      
    
    </summary>
    
      <category term="测试开发" scheme="http://yoursite.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="自动化测试" scheme="http://yoursite.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>UI层自动化测试框架（四）：对象库层</title>
    <link href="http://yoursite.com/2016/11/29/UI%E5%B1%82%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E5%AF%B9%E8%B1%A1%E5%BA%93%E5%B1%82/"/>
    <id>http://yoursite.com/2016/11/29/UI层自动化测试框架（四）：对象库层/</id>
    <published>2016-11-28T17:13:50.000Z</published>
    <updated>2018-05-01T11:51:24.672Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文为CharliChen原创文章，转载请注明出处！！</p></blockquote><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>本章主要介绍自动化测试框架–对象库层。该层是UI自动化中比较关键的一层，设计自动化框架，不可避免的就是对象库，有一个好的对象库，可以让整个测试框架可维护性更高，大大增强了代码的复用性。</p><p>讲之前先和大家普及个一概念：PO模式</p><h2 id="PO模式"><a href="#PO模式" class="headerlink" title="PO模式"></a>PO模式</h2><p>那什么叫PO模式，为什么要用PO模式？引用如下一段话，你就会恍然大悟~</p><blockquote><p>PO模式，全称Page Object模式，是Selenium中的一种测试设计模式，主要是将每一个页面设计为一个Class，其中包含页面中需要测试的元素（按钮，输入框，标题 等），这样在写测试脚本时，可以通过调用页面类来获取页面元素。当页面某个元素id或者位置变化时，这时不用更改测试脚本，只用改下对应的页面类就行了。 </p></blockquote><p>上面这段话，总结一下就是：PO就是一个设计模式，将代码以页面为单位进行组织，针对这个页面上的所有信息，相关操作都放到一个类中；从而使具体的测试用例变成了简单的调用和验证操作。</p><p>如果你深刻理解了就应该知道了PO对象的好处，当然这只是阐述啦它的可维护性，但它的复用性就更好理解，这里就不多做解释。</p><h2 id="对象库的引入"><a href="#对象库的引入" class="headerlink" title="对象库的引入"></a>对象库的引入</h2><p>对于上面讲的PO模式，大家会不会有一个疑惑？这样一来一个app有很多page，以DJI GO为例50个左右肯定是有的吧，那这样是不是要设计50个页面类，然后每个页面类中写对应的元素。这样一来单单页面类就写这么多，感觉工程量太大，而且代码的复用性不高。</p><p><strong>那有没有什么改进的办法呢？</strong></p><p>1.首先定义一个BasePage类，毕竟所有的页面都有共同的东西，每个页面都有元素，每个页面元素都有相应的方法。该类包括一个成员变量 pageName，和封装的的方法。重写它的构造方法，用来初始化成员变量。以后每次调用某个页面时，只用new一个BasePage对象，传入对应的参数pageName，就获得对应页面。</p><p><img src="http://img.blog.csdn.net/20160907202002544" alt="这里写图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">package com.dji.object;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line"></span><br><span class="line">import com.dji.utils.AppiumExecutorImpl;</span><br><span class="line">import com.dji.utils.Log;</span><br><span class="line">import com.dji.utils.XmlUtils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import io.appium.java_client.AppiumDriver;</span><br><span class="line">import io.appium.java_client.MobileElement;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 封装一个BasePage的类，毕竟所有的页面都有共同的东西，每个页面都有元素，每个页面元素都有相应的方法</span><br><span class="line"> * </span><br><span class="line"> * @author Charlie.chen</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class BasePage extends AppiumExecutorImpl &#123;</span><br><span class="line"></span><br><span class="line">protected AppiumDriver&lt;?&gt; driver;</span><br><span class="line">protected String pageName;//页面名称</span><br><span class="line">protected String xmlPath;   //页面元素路径</span><br><span class="line">protected HashMap&lt;String, Locator&gt; locatorMap;</span><br><span class="line">public Log log = new Log(this.getClass());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public BasePage(AppiumDriver&lt;?&gt; driver,String pageName) throws Exception  &#123;</span><br><span class="line">super(driver);</span><br><span class="line">this.driver = driver;</span><br><span class="line">this.pageName=pageName;</span><br><span class="line"></span><br><span class="line">//获取资源文件page.xml的路径</span><br><span class="line">//xmlPath=System.getProperty(&quot;user.dir&quot;)+&quot;\\src\\main\\java\\com\\dji\\pageObject\\Page.xml&quot;;</span><br><span class="line">    xmlPath=BasePage.class.getClassLoader().getResource(&quot;page.xml&quot;).getPath();</span><br><span class="line"></span><br><span class="line">//locatorMap = XmlUtils.readXMLDocument(xmlPath, this.getClass().getSimpleName());</span><br><span class="line">locatorMap = XmlUtils.readXMLDocument(xmlPath, pageName);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public void type(String locatorName, String values) &#123;</span><br><span class="line">super.type(getLocator(locatorName), values);</span><br><span class="line">log.info(&quot;type value is:  &quot; + values);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public void click(String locatorName) &#123;</span><br><span class="line">super.click(getLocator(locatorName));</span><br><span class="line">log.info(&quot;click: &quot;+locatorName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public String getText(String locatorName) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return super.getText(getLocator(locatorName));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public MobileElement findElement(String locatorName) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return super.findElement(getLocator(locatorName));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public boolean isElementDisplayed(String locatorName) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return super.isElementDisplayed(getLocator(locatorName));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 根据locatorName获取Locator</span><br><span class="line"> * </span><br><span class="line"> * @author Charlie.chen</span><br><span class="line"> * @param locatorName</span><br><span class="line"> * @return</span><br><span class="line"> * @throws IOException</span><br><span class="line"> */</span><br><span class="line">public  Locator getLocator(String locatorName) &#123;</span><br><span class="line"></span><br><span class="line">Locator locator =  null;</span><br><span class="line"></span><br><span class="line">if(locatorMap!=null)</span><br><span class="line">&#123;</span><br><span class="line">locator = locatorMap.get(locatorName);</span><br><span class="line">&#125;</span><br><span class="line">return locator;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中有个一个集合locatorMap，主要存储的对应的pageName和Locator内容</p><p>2.接下来封装元素，每个元素都有相应的定位地址（xpath路径或css或id）,等待时间，定位方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">package com.dji.object;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 封装页面元素，每个元素都有相应的定位地址（xpath路径或css或id）,等待时间，定位方式</span><br><span class="line"> * </span><br><span class="line"> * @author Charlie.chen</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class Locator &#123;</span><br><span class="line"></span><br><span class="line">private String address;  //定位地址</span><br><span class="line">private int waitSec;    //等待时间</span><br><span class="line">private ByType byType;  //定位方式</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 定位类型枚举</span><br><span class="line"> * @author Charlie.chen</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line"> public enum ByType&#123;</span><br><span class="line">        by, xpath, linkText, id, name, className</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public Locator() &#123;&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Locator构造器，默认定位类型By.xpath</span><br><span class="line"> * </span><br><span class="line"> * @author Charlie.chen</span><br><span class="line"> * @param element</span><br><span class="line"> */</span><br><span class="line">public Locator(String address) &#123;</span><br><span class="line">this.address = address;</span><br><span class="line">this.waitSec = 3;</span><br><span class="line">this.byType = ByType.xpath;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Locator(String address, int waitSec) &#123;</span><br><span class="line">this.waitSec = waitSec;</span><br><span class="line">this.address = address;</span><br><span class="line">this.byType = ByType.xpath;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Locator(String address, int waitSec, ByType byType) &#123;</span><br><span class="line">this.waitSec = waitSec;</span><br><span class="line">this.address = address;</span><br><span class="line">this.byType = byType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getAddress() &#123;</span><br><span class="line">return address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public int getWaitSec() &#123;</span><br><span class="line">return waitSec;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public ByType getBy() &#123;</span><br><span class="line">return byType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setBy(ByType byType) &#123;</span><br><span class="line">this.byType = byType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public ByType getByType() &#123;</span><br><span class="line">return byType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对象库的管理"><a href="#对象库的管理" class="headerlink" title="对象库的管理"></a>对象库的管理</h2><p>针对上面的两个类BasePage和Locator，其实就是分别代表页面对象库和元素对象库。关于对象库的管理，就是将对象库中的数据，类似pageName和元素属性id，xpth等分离出来保存在page.xml文件中，这样做到了数据隔离的效果，维护性更高。</p><p>page.xml如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;map&gt;</span><br><span class="line">&lt;!--locator of page map info --&gt;</span><br><span class="line"></span><br><span class="line">&lt;page pageName=&quot;menuPage&quot;&gt;</span><br><span class="line">&lt;!--Locator lists --&gt;</span><br><span class="line">&lt;locator type=&quot;xpth&quot; timeOut=&quot;3&quot; value=&quot;//android.widget.TextView[contains(@text,&apos;设备&apos;)]&quot;&gt;设备&lt;/locator&gt;</span><br><span class="line">&lt;locator type=&quot;xpth&quot; timeOut=&quot;3&quot; value=&quot;//android.widget.TextView[contains(@text,&apos;编辑器&apos;)]&quot;&gt;编辑器&lt;/locator&gt;</span><br><span class="line">&lt;locator type=&quot;xpth&quot; timeOut=&quot;3&quot; value=&quot;//android.widget.TextView[contains(@text,&apos;天空之城&apos;)]&quot;&gt;天空之城&lt;/locator&gt;</span><br><span class="line">&lt;locator type=&quot;xpth&quot; timeOut=&quot;3&quot; value=&quot;//android.widget.TextView[contains(@text,&apos;我&apos;)]&quot;&gt;我&lt;/locator&gt;</span><br><span class="line">&lt;/page</span><br><span class="line"></span><br><span class="line">&lt;page pageName=&quot;minePage&quot;&gt;</span><br><span class="line">&lt;!--Locator lists --&gt;</span><br><span class="line">&lt;locator type=&quot;id&quot; timeOut=&quot;3&quot; value=&quot;dji.pilot:id/icon_user&quot;&gt;用户图像&lt;/locator&gt;</span><br><span class="line">&lt;locator type=&quot;id&quot; timeOut=&quot;3&quot; value=&quot;dji.pilot:id/mine_user_name&quot;&gt;用户名&lt;/locator&gt;</span><br><span class="line">&lt;locator type=&quot;id&quot; timeOut=&quot;3&quot; value=&quot;dji.pilot:id/v2_mine_store&quot;&gt;DJI商城&lt;/locator&gt;</span><br><span class="line">&lt;locator type=&quot;id&quot; timeOut=&quot;3&quot; value=&quot;dji.pilot:id/v2_mine_academy&quot;&gt;DJI论坛&lt;/locator&gt;</span><br><span class="line">&lt;locator type=&quot;xpth&quot; timeOut=&quot;3&quot; value=&quot;//android.widget.TextView[contains(@text,&apos;礼品卡&apos;)]&quot;&gt;礼品卡&lt;/locator&gt;</span><br><span class="line">&lt;locator type=&quot;xpth&quot; timeOut=&quot;3&quot; value=&quot;//android.widget.TextView[contains(@text,&apos;上传队列&apos;)]&quot;&gt;上传列表&lt;/locator&gt;</span><br><span class="line">&lt;locator type=&quot;xpth&quot; timeOut=&quot;3&quot; value=&quot;//android.widget.TextView[contains(@text,&apos;消息&apos;)]&quot;&gt;消息&lt;/locator&gt;</span><br><span class="line">&lt;locator type=&quot;xpth&quot; timeOut=&quot;3&quot; value=&quot;//android.widget.TextView[contains(@text,&apos;我的收藏&apos;)]&quot;&gt;我的收藏&lt;/locator&gt;</span><br><span class="line">&lt;locator type=&quot;xpth&quot; timeOut=&quot;3&quot; value=&quot;//android.widget.TextView[contains(@text,&apos;更多&apos;)]&quot;&gt;更多&lt;/locator&gt;</span><br><span class="line">&lt;locator type=&quot;xpth&quot; timeOut=&quot;3&quot; value=&quot;//android.widget.TextView[contains(@text,&apos;设置&apos;)]&quot;&gt;设置&lt;/locator&gt;</span><br><span class="line">&lt;/page&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;page pageName=&quot;loginPage&quot;&gt;</span><br><span class="line">&lt;!--Locator lists --&gt;</span><br><span class="line">&lt;locator type=&quot;id&quot; timeOut=&quot;3&quot; value=&quot;dji.pilot:id/edt_email&quot;&gt;登录输入账号框&lt;/locator&gt;</span><br><span class="line">&lt;locator type=&quot;id&quot; timeOut=&quot;3&quot; value=&quot;dji.pilot:id/edt_password&quot;&gt;登录输入密码框&lt;/locator&gt;</span><br><span class="line">&lt;locator type=&quot;id&quot; timeOut=&quot;3&quot; value=&quot;dji.pilot:id/btn_sign_ok&quot;&gt;登录&lt;/locator&gt;</span><br><span class="line">&lt;/page&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;page pageName=&quot;settingPage&quot;&gt;</span><br><span class="line">    &lt;!--Locator lists --&gt;</span><br><span class="line">&lt;locator type=&quot;id&quot; timeOut=&quot;3&quot; value=&quot;dji.pilot:id/mine_settings_back_button&quot;&gt;返回&lt;/locator&gt;</span><br><span class="line"></span><br><span class="line">&lt;locator type=&quot;id&quot; timeOut=&quot;3&quot; value=&quot;dji.pilot:id/mine_settings_cellular_switch&quot;&gt;使用手机流量上传文件&lt;/locator&gt;</span><br><span class="line">&lt;locator type=&quot;id&quot; timeOut=&quot;3&quot; value=&quot;dji.pilot:id/mine_settings_develop_switch&quot;&gt;开启USB调试&lt;/locator&gt;</span><br><span class="line">&lt;locator type=&quot;id&quot; timeOut=&quot;3&quot; value=&quot;dji.pilot:id/mine_settings_reset_guide_button&quot;&gt;重置新手指引&lt;/locator&gt;</span><br><span class="line">&lt;locator type=&quot;id&quot; timeOut=&quot;3&quot; value=&quot;dji.pilot:id/mine_settings_clean_cache_button&quot;&gt;清除数据缓存&lt;/locator&gt;</span><br><span class="line">&lt;locator type=&quot;id&quot; timeOut=&quot;3&quot; value=&quot;dji.pilot:id/mine_language_change&quot;&gt;多语言&lt;/locator&gt;</span><br><span class="line">&lt;locator type=&quot;id&quot; timeOut=&quot;3&quot; value=&quot;dji.pilot:id/mine_settings_privacy_button&quot;&gt;隐私设置&lt;/locator&gt;</span><br><span class="line">&lt;locator type=&quot;id&quot; timeOut=&quot;3&quot; value=&quot;dji.pilot:id/mine_settings_rate_app_button&quot;&gt;给我们评分&lt;/locator&gt;</span><br><span class="line">&lt;locator type=&quot;id&quot; timeOut=&quot;3&quot; value=&quot;dji.pilot:id/mine_settings_sign_out_button&quot;&gt;退出DJI账号&lt;/locator&gt;</span><br><span class="line"></span><br><span class="line">&lt;locator type=&quot;id&quot; timeOut=&quot;3&quot; value=&quot;android:id/button2&quot;&gt;取消&lt;/locator&gt;</span><br><span class="line">&lt;locator type=&quot;id&quot; timeOut=&quot;3&quot; value=&quot;android:id/button1&quot;&gt;确定&lt;/locator&gt;</span><br><span class="line"></span><br><span class="line">&lt;locator type=&quot;id&quot; timeOut=&quot;3&quot; value=&quot;dji.pilot:id/mine_user_protocol&quot;&gt;DJIGO用户协议&lt;/locator&gt;</span><br><span class="line">&lt;/page&gt;</span><br><span class="line"></span><br><span class="line">&lt;/map&gt;</span><br></pre></td></tr></table></figure><p>分析一下page.xml中登录页，对应的pageName=“loginPage”，对应的元素名有“登录输入账号框”，“登录输入密码框”，“登录按钮”和对应的定位方式和等待时间。这样是不是一目了然，以后如果页面元素属性发生变化，只用改下以上配置文件即可。关于xml文件的读取，在第三章中有讲过，通过XmlUtils进行读取，将读取的信息保存在HashMap集合locatorMap中。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总结一句话：就是将页面和元素封装在两个类中，然后将对应的数据抽离出来放在xml文件中管理。<br>对象库大大提高了测试框架的复用性和可维护性，在测试框架中起到核心作用，这里只是我的处理方式，相信还有更简洁更易度的方法，等待大家去挖掘。</p><p>下一章主要讲解 自动化测试框架（五）：业务层和用例层，敬请期待！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文为CharliChen原创文章，转载请注明出处！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;本章主要介绍自动
      
    
    </summary>
    
      <category term="测试开发" scheme="http://yoursite.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="自动化测试" scheme="http://yoursite.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>UI层自动化测试框架（三）：基础层</title>
    <link href="http://yoursite.com/2016/11/26/UI%E5%B1%82%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%9F%BA%E7%A1%80%E5%B1%82/"/>
    <id>http://yoursite.com/2016/11/26/UI层自动化测试框架（三）：基础层/</id>
    <published>2016-11-26T14:40:11.000Z</published>
    <updated>2018-05-01T11:49:29.559Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文为CharliChen原创文章，转载请注明出处！！</p></blockquote><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>第一章我就有说到，该自动化测试框架分为四层：基础层，对象层，操作层，用例层。本章主要介绍基础层的设计。</p><p>测试框架目录如图：<br><img src="http://img.blog.csdn.net/20160907121727546" alt="这里写图片描述"></p><p>对应源码地址：<a href="https://github.com/iTestinglab" target="_blank" rel="noopener">https://github.com/iTestinglab</a></p><h2 id="基础层介绍"><a href="#基础层介绍" class="headerlink" title="基础层介绍"></a>基础层介绍</h2><p>该层封装Appium的相关操作和一些常见的工具类。</p><p>为什么要单独搞一个基础层呢？<br>这样的目的还是为了体现Java的核心思想：封装，这样框架显得更加的清晰，简练，代码的复用性和拓展性更高。每一层负责各自的功能，比如：我在基础层专门写一个读取xml数据的工具类，这样，其他层如果想要解析xml格式的数据时，只要调用基础层的这个封装好的XmlUtils工具类即可，这样是不是很方便。</p><h2 id="基础层常见的类"><a href="#基础层常见的类" class="headerlink" title="基础层常见的类"></a>基础层常见的类</h2><p>接下来主要讲解基础层的各个类的作用和实现原理<br>如图为基础层核心的类：<br><img src="http://img.blog.csdn.net/20160907122043837" alt="这里写图片描述"></p><h3 id="1-AppiumExecutor"><a href="#1-AppiumExecutor" class="headerlink" title="1. AppiumExecutor"></a>1. AppiumExecutor</h3><p>AppiumExecutor为一个接口，包含若干个抽象方法，这些方法都是appium基本的操作方法，比如：点击，输入，获取文本等等等<br><img src="http://img.blog.csdn.net/20160907122720800" alt="这里写图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">package com.dji.utils;</span><br><span class="line"></span><br><span class="line">import com.dji.object.Locator;</span><br><span class="line"></span><br><span class="line">import io.appium.java_client.MobileElement;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Appium常见的API</span><br><span class="line"> * </span><br><span class="line"> * @author Charlie.chen</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public interface AppiumExecutor &#123;</span><br><span class="line"></span><br><span class="line">//点击元素</span><br><span class="line">public void click(Locator locator);</span><br><span class="line"></span><br><span class="line">//输入文本</span><br><span class="line">public void type(Locator locator, String values);</span><br><span class="line"></span><br><span class="line">//获取元素文本</span><br><span class="line">public String getText(Locator locator);</span><br><span class="line"></span><br><span class="line">//获取元素</span><br><span class="line">public MobileElement findElement( Locator locator) ;</span><br><span class="line"></span><br><span class="line">//判断元素是否出现</span><br><span class="line">public boolean isElementDisplayed(Locator locator);</span><br><span class="line"></span><br><span class="line">//向左滑动</span><br><span class="line">public void swipeToLeft();</span><br><span class="line">//向右滑动</span><br><span class="line">public void swipeToRight();</span><br><span class="line">//向上滑动</span><br><span class="line">public void swipeToUp();</span><br><span class="line">//向下滑动</span><br><span class="line">public void swipeToDown();</span><br><span class="line"></span><br><span class="line">//通过坐标点击</span><br><span class="line">public void tapByXY(int x, int y);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-AppiumExecutorImpl"><a href="#2-AppiumExecutorImpl" class="headerlink" title="2. AppiumExecutorImpl"></a>2. AppiumExecutorImpl</h3><p>封装一个AppiumExecutorImpl类，实现AppiumExecutor接口<br><img src="http://img.blog.csdn.net/20160907123045616" alt="这里写图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><span class="line">package com.dji.utils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">import org.openqa.selenium.By;</span><br><span class="line"></span><br><span class="line">import com.dji.object.Locator;</span><br><span class="line"></span><br><span class="line">import io.appium.java_client.AppiumDriver;</span><br><span class="line">import io.appium.java_client.MobileElement;</span><br><span class="line">import io.appium.java_client.TouchAction;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 封装一个AppiumExecutorImpl类，实现AppiumExecutor接口</span><br><span class="line"> * </span><br><span class="line"> * @author Charlie.chen</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class AppiumExecutorImpl implements AppiumExecutor &#123;</span><br><span class="line"></span><br><span class="line">private  AppiumDriver&lt;?&gt; driver;</span><br><span class="line">public Log log=new Log(this.getClass());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public AppiumExecutorImpl(AppiumDriver&lt;?&gt; driver) &#123;</span><br><span class="line">this.driver = driver;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public AppiumDriver&lt;?&gt; getDriver() &#123;</span><br><span class="line">return driver;</span><br><span class="line">&#125;</span><br><span class="line">public void setDriver(AppiumDriver&lt;?&gt; driver) &#123;</span><br><span class="line">this.driver = driver;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 在元素中中输入文本</span><br><span class="line"> * </span><br><span class="line"> * @author Charlie.chen</span><br><span class="line"> * @param locator</span><br><span class="line"> * @param values</span><br><span class="line"> * @throws Exception</span><br><span class="line"> */</span><br><span class="line">public void type(Locator locator, String values)&#123;</span><br><span class="line">MobileElement e = (MobileElement) findElement(locator);</span><br><span class="line">e.sendKeys(values);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 点击元素</span><br><span class="line">     * </span><br><span class="line">     * @author Charlie.chen</span><br><span class="line">     * @param locator</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">public void click(Locator locator) &#123;</span><br><span class="line">MobileElement e = (MobileElement) findElement(locator);</span><br><span class="line">e.click();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 获取元素文本信息</span><br><span class="line"> * </span><br><span class="line"> * @author Charlie.chen</span><br><span class="line"> * @param locator</span><br><span class="line"> */</span><br><span class="line">public String getText(Locator locator) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">MobileElement e = (MobileElement) findElement(locator);</span><br><span class="line">String text=e.getText();</span><br><span class="line">return text;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 获取元素</span><br><span class="line"> * </span><br><span class="line"> * @author Charlie.chen</span><br><span class="line"> * @param locator</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public MobileElement findElement(Locator locator) &#123;</span><br><span class="line">MobileElement e=null;</span><br><span class="line">switch (locator.getBy()) &#123;</span><br><span class="line">case xpath:</span><br><span class="line">e = (MobileElement) driver.findElement(By.xpath(locator.getAddress()));</span><br><span class="line">break;</span><br><span class="line">case id:</span><br><span class="line">e = (MobileElement) driver.findElement(By.id(locator.getAddress()));</span><br><span class="line">break;</span><br><span class="line">case name:</span><br><span class="line">e = (MobileElement) driver.findElement(By.name(locator.getAddress()));</span><br><span class="line">break;</span><br><span class="line">case className:</span><br><span class="line">e = (MobileElement) driver.findElement(By.className(locator.getAddress()));</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">e = (MobileElement) driver.findElement(By.id(locator.getAddress()));</span><br><span class="line">&#125;</span><br><span class="line">return e;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 向左滑动</span><br><span class="line"> */</span><br><span class="line">public void swipeToLeft() &#123;</span><br><span class="line">int x = driver.manage().window().getSize().width;</span><br><span class="line">int y = driver.manage().window().getSize().height;</span><br><span class="line">try &#123;</span><br><span class="line">driver.swipe((x / 8 * 7), (y / 2 * 1), (x / 8 * 1), (y / 2 * 1), 1000);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">driver.swipe((x / 8 * 7), (y / 2 * 1), (x / 8 * 1), (y / 2 * 1), 1000);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 向右滑动</span><br><span class="line"> */</span><br><span class="line">public void swipeToRight() &#123;</span><br><span class="line">int x = driver.manage().window().getSize().width;</span><br><span class="line">int y = driver.manage().window().getSize().height;</span><br><span class="line">try &#123;</span><br><span class="line">driver.swipe((x / 8 * 1), (y / 2 * 1), (x / 8 * 7), (y / 2 * 1), 1000);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">driver.swipe((x / 8 * 1), (y / 2 * 1), (x / 8 * 7), (y / 2 * 1), 1000);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 向上滑动</span><br><span class="line"> */</span><br><span class="line">public void swipeToUp() &#123;</span><br><span class="line">int x = driver.manage().window().getSize().width;</span><br><span class="line">int y = driver.manage().window().getSize().height;</span><br><span class="line">try &#123;</span><br><span class="line">driver.swipe((x / 2 * 1), (y / 4 * 3), (x / 2 * 1), (y / 4 * 1), 1500);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">driver.swipe((x / 2 * 1), (y / 4 * 3), (x / 2 * 1), (y / 4 * 1), 1500);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 向下滑动</span><br><span class="line"> */</span><br><span class="line">public void swipeToDown() &#123;</span><br><span class="line">int x = driver.manage().window().getSize().width;</span><br><span class="line">int y = driver.manage().window().getSize().height;</span><br><span class="line">try &#123;</span><br><span class="line">driver.swipe((x / 2 * 1), (y / 8 * 1), (x / 2 * 1), (y / 8 * 7), 1000);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">driver.swipe((x / 2 * 1), (y / 8 * 1), (x / 2 * 1), (y / 8 * 7), 1000);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 通过坐标点击 </span><br><span class="line"> */</span><br><span class="line">public void tapByXY(int x, int y) &#123;</span><br><span class="line"></span><br><span class="line">TouchAction to = new TouchAction(driver);</span><br><span class="line">try &#123;</span><br><span class="line">to.tap(x, y).release().perform();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">System.out.println(&quot;点击失败&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 判断元素是否出现</span><br><span class="line"> * </span><br><span class="line"> * @author Charlie.chen</span><br><span class="line"> * @param locator</span><br><span class="line"> * @param timeOut</span><br><span class="line"> * @return</span><br><span class="line"> * @throws IOException</span><br><span class="line"> */</span><br><span class="line">public boolean isElementDisplayed( Locator locator) &#123;</span><br><span class="line">boolean flag = false;</span><br><span class="line">try &#123;</span><br><span class="line">findElement(locator).isDisplayed();</span><br><span class="line">flag = true;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">flag = false;</span><br><span class="line">&#125;</span><br><span class="line">return flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-DriverFactory"><a href="#3-DriverFactory" class="headerlink" title="3. DriverFactory"></a>3. DriverFactory</h3><p>封装一个DriverFactory类，便于创建基于Android和iOS的driver，当创建Android的driver时，只用调用createAndroidDriver方法即可。<br><img src="http://img.blog.csdn.net/20160907123339380" alt="这里写图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">package com.dji.utils;</span><br><span class="line"></span><br><span class="line">import java.net.MalformedURLException;</span><br><span class="line">import java.net.URL;</span><br><span class="line"></span><br><span class="line">import org.openqa.selenium.By;</span><br><span class="line">import org.openqa.selenium.remote.DesiredCapabilities;</span><br><span class="line"></span><br><span class="line">import io.appium.java_client.android.AndroidDriver;</span><br><span class="line">import io.appium.java_client.ios.IOSDriver;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 创建基于Android和iOS的driver</span><br><span class="line"> * </span><br><span class="line"> * @author Charlie.chen</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class DriverFactory &#123;</span><br><span class="line"></span><br><span class="line">private static AndroidDriver&lt;?&gt; androidDriver = null;</span><br><span class="line">private static IOSDriver&lt;?&gt; iosDriver = null;</span><br><span class="line"></span><br><span class="line">private static Log log = new Log(DriverFactory.class);</span><br><span class="line"></span><br><span class="line">@SuppressWarnings(&quot;rawtypes&quot;)</span><br><span class="line">public static AndroidDriver&lt;?&gt; createAndroidDriver(String udid, String port, String appPackage,</span><br><span class="line">String appActivity) &#123;</span><br><span class="line"></span><br><span class="line">DesiredCapabilities caps = new DesiredCapabilities();</span><br><span class="line">// apk地址，不需要安装的话这行不需要</span><br><span class="line">// File app=new File(&quot;C:\\Users\\charlie.chen\\djigo.apk&quot;);</span><br><span class="line">// 不需要安装的话就去掉这个</span><br><span class="line">// caps.setCapability(&quot;app&quot;, app.getAbsolutePath());</span><br><span class="line"></span><br><span class="line">caps.setCapability(&quot;platformName&quot;, &quot;Android&quot;);</span><br><span class="line">caps.setCapability(&quot;platformVersion&quot;, &quot;6.0&quot;);</span><br><span class="line">caps.setCapability(&quot;deviceName&quot;, &quot;P9&quot;);</span><br><span class="line">caps.setCapability(&quot;udid&quot;, udid);</span><br><span class="line">caps.setCapability(&quot;appPackage&quot;, appPackage);</span><br><span class="line">caps.setCapability(&quot;appActivity&quot;, appActivity);</span><br><span class="line">// caps.setCapability(MobileCapabilityType.BROWSER_NAME, &quot;Chrome&quot;);</span><br><span class="line">caps.setCapability(&quot;unicodeKeyboard&quot;, &quot;True&quot;); // 支持中文输入</span><br><span class="line">caps.setCapability(&quot;resetKeyboard&quot;, &quot;True&quot;); // 重置输入法为系统默认</span><br><span class="line"></span><br><span class="line">// 安装时不对apk进行重签名，设置很有必要，否则有的apk在重签名后无法正常使用</span><br><span class="line">// caps.setCapability(&quot;noSign&quot;, &quot;True&quot;);</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">androidDriver = new AndroidDriver(new URL(&quot;http://127.0.0.1:&quot; + port + &quot;/wd/hub&quot;), caps);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">log.error(&quot;Android.appium连接失败&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return androidDriver;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@SuppressWarnings(&quot;rawtypes&quot;)</span><br><span class="line">public static IOSDriver&lt;?&gt; createIOSDriver(String udid, String port) &#123;</span><br><span class="line"></span><br><span class="line">DesiredCapabilities caps = new DesiredCapabilities();</span><br><span class="line">caps.setCapability(&quot;platformName&quot;, &quot;iOS&quot;);</span><br><span class="line">caps.setCapability(&quot;platformVersion&quot;, &quot;9.3&quot;);</span><br><span class="line">caps.setCapability(&quot;deviceName&quot;, &quot;iPhone 6s&quot;);</span><br><span class="line"></span><br><span class="line">caps.setCapability(&quot;unicodeKeyboard&quot;, &quot;True&quot;);</span><br><span class="line">caps.setCapability(&quot;resetKeyboard&quot;, &quot;True&quot;);</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">iosDriver = new IOSDriver(new URL(&quot;http://127.0.0.1:&quot; + port + &quot;/wd/hub&quot;), caps);</span><br><span class="line">&#125; catch (MalformedURLException e) &#123;</span><br><span class="line">log.error(&quot;iOS.appium连接失败&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return iosDriver;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-XmlUtils"><a href="#4-XmlUtils" class="headerlink" title="4. XmlUtils"></a>4. XmlUtils</h3><p>XmlUtils工具类负责读取xml格式的文件，例如page.xml就是通过XmlUtils进行读取解析的（page.xml文件在下一章会讲到），这里用到了第三方的开源框架dom4j</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">package com.dji.utils;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileWriter;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line"></span><br><span class="line">import org.dom4j.Attribute;</span><br><span class="line">import org.dom4j.Document;</span><br><span class="line">import org.dom4j.DocumentHelper;</span><br><span class="line">import org.dom4j.Element;</span><br><span class="line">import org.dom4j.io.OutputFormat;</span><br><span class="line">import org.dom4j.io.SAXReader;</span><br><span class="line">import org.dom4j.io.XMLWriter;</span><br><span class="line"></span><br><span class="line">import com.dji.object.Locator;</span><br><span class="line">import com.dji.object.Locator.ByType;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  将元素放在page.xml统一管理，要获取元素的信息，通过pageName从xml文件中读取。</span><br><span class="line"> *  读取xml的页面元素是使用dom4j开源框架</span><br><span class="line"> *  </span><br><span class="line"> * @author Charlie.chen</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class XmlUtils &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static HashMap&lt;String, Locator&gt; readXMLDocument(String xmlPath,String pageName) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">Log log = new Log(XmlUtils.class);</span><br><span class="line"></span><br><span class="line">HashMap&lt;String, Locator&gt; locatorMap = new HashMap&lt;String, Locator&gt;();</span><br><span class="line">locatorMap.clear();</span><br><span class="line"></span><br><span class="line">File file = new File(xmlPath);</span><br><span class="line">if (!file.exists()) &#123;</span><br><span class="line">log.error(&quot;Can&apos;t find &quot; + xmlPath);</span><br><span class="line">return locatorMap=null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建SAXReader对象</span><br><span class="line">SAXReader reader = new SAXReader();</span><br><span class="line">//读取文件 转换成Document </span><br><span class="line">Document document = reader.read(file);</span><br><span class="line">//获取根节点元素对象</span><br><span class="line">Element root = document.getRootElement();</span><br><span class="line"></span><br><span class="line">//遍历</span><br><span class="line">for (Iterator&lt;?&gt; i = root.elementIterator(); i.hasNext();) &#123;</span><br><span class="line">Element page = (Element) i.next();</span><br><span class="line">if (page.attribute(0).getValue().equalsIgnoreCase(pageName)) &#123;</span><br><span class="line">log.info(&quot;pageName is:&quot; + pageName);</span><br><span class="line"></span><br><span class="line">for (Iterator&lt;?&gt; l = page.elementIterator(); l.hasNext();) &#123;</span><br><span class="line">String type = null;</span><br><span class="line">String timeOut = &quot;3&quot;;</span><br><span class="line">String value = null;</span><br><span class="line">String locatorName = null;</span><br><span class="line">Element locator = (Element) l.next();</span><br><span class="line"></span><br><span class="line">for (Iterator&lt;?&gt; j = locator.attributeIterator(); j.hasNext();) &#123;</span><br><span class="line">Attribute attribute = (Attribute) j.next();</span><br><span class="line">if (attribute.getName().equals(&quot;type&quot;)) &#123;</span><br><span class="line">type = attribute.getValue();</span><br><span class="line">//log.info(&quot;get locator type &quot; + type);</span><br><span class="line">&#125; else if (attribute.getName().equals(&quot;timeOut&quot;)) &#123;</span><br><span class="line">timeOut = attribute.getValue();</span><br><span class="line">//log.info(&quot;get locator timeOut &quot; + timeOut);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">value = attribute.getValue();</span><br><span class="line">//log.info(&quot;get locator value &quot; + value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Locator temp = new Locator(value,Integer.parseInt(timeOut), getByType(type));</span><br><span class="line">locatorName = locator.getText();</span><br><span class="line">//log.info(&quot;locatorName is &quot; + locatorName);</span><br><span class="line">locatorMap.put(locatorName, temp);</span><br><span class="line">&#125;</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">return locatorMap;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static ByType getByType(String type) &#123;</span><br><span class="line">ByType byType = ByType.xpath;</span><br><span class="line">if (type == null || type.equalsIgnoreCase(&quot;xpath&quot;)) &#123;</span><br><span class="line">byType = ByType.xpath;</span><br><span class="line">&#125; else if (type.equalsIgnoreCase(&quot;id&quot;)) &#123;</span><br><span class="line">byType = ByType.id;</span><br><span class="line">&#125; else if (type.equalsIgnoreCase(&quot;name&quot;)) &#123;</span><br><span class="line">byType = ByType.name;</span><br><span class="line">&#125; else if (type.equalsIgnoreCase(&quot;className&quot;)) &#123;</span><br><span class="line">byType = ByType.className;</span><br><span class="line">&#125;</span><br><span class="line">return byType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-ScreenShot"><a href="#5-ScreenShot" class="headerlink" title="5. ScreenShot"></a>5. ScreenShot</h3><p>截图并保存到本地，其中包括两个主要的方法，getCurrentTime获取当前时间，getScreenShot进行截图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">package com.dji.utils;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.io.FileUtils;</span><br><span class="line">import org.openqa.selenium.OutputType;</span><br><span class="line"></span><br><span class="line">import io.appium.java_client.AppiumDriver;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 截图并保存至本地</span><br><span class="line"> * </span><br><span class="line"> * @author Charlie.chen</span><br><span class="line"> */</span><br><span class="line">public class ScreenShot &#123;</span><br><span class="line"></span><br><span class="line">private AppiumDriver&lt;?&gt; driver;</span><br><span class="line">// 测试失败截屏保存的路径</span><br><span class="line">private String path;</span><br><span class="line">public Log log=new Log(this.getClass());</span><br><span class="line"></span><br><span class="line">public ScreenShot(AppiumDriver&lt;?&gt; driver)&#123;</span><br><span class="line">this.driver=driver;</span><br><span class="line">path=System.getProperty(&quot;user.dir&quot;)+ &quot;//snapshot//&quot;+ this.getClass().getSimpleName()+&quot;_&quot;+getCurrentTime() + &quot;.png&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void getScreenShot() &#123;</span><br><span class="line"></span><br><span class="line">File screen = driver.getScreenshotAs(OutputType.FILE);</span><br><span class="line">File screenFile = new File(path);</span><br><span class="line">try &#123;</span><br><span class="line">FileUtils.copyFile(screen, screenFile);</span><br><span class="line">log.info(&quot;截图保存的路径:&quot; + path);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">log.error(&quot;截图失败&quot;);</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 获取当前时间</span><br><span class="line"> */</span><br><span class="line">public String getCurrentTime()&#123;</span><br><span class="line">Date date=new Date();</span><br><span class="line">SimpleDateFormat sdf=new SimpleDateFormat(&quot;yyyy-MM-dd HH-mm-ss&quot;);</span><br><span class="line">String currentTime=sdf.format(date);</span><br><span class="line">return currentTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getPath() &#123;</span><br><span class="line">return path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setPath(String path) &#123;</span><br><span class="line">this.path = path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-TestNGListener"><a href="#6-TestNGListener" class="headerlink" title="6. TestNGListener"></a>6. TestNGListener</h3><p> TestNGListener继承TestListenerAdapter，当 testNG执行case 失败后 ，testNGListener会捕获执行失败，如果要实现失败自动截图，重写Listener的onTestFailure方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">package com.dji.utils;</span><br><span class="line"></span><br><span class="line">import org.testng.ITestContext;</span><br><span class="line">import org.testng.ITestResult;</span><br><span class="line">import org.testng.TestListenerAdapter;</span><br><span class="line"></span><br><span class="line">import io.appium.java_client.AppiumDriver;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * testNG执行case 失败后 ，testNG Listener会捕获执行失败</span><br><span class="line"> * 如果要实现失败自动截图，需要重写Listener的onTestFailure方法</span><br><span class="line"> * </span><br><span class="line"> * @author Charlie.chen</span><br><span class="line"> */</span><br><span class="line">public class TestNGListener extends TestListenerAdapter &#123;</span><br><span class="line"></span><br><span class="line">private static AppiumDriver&lt;?&gt; driver;</span><br><span class="line"></span><br><span class="line">Log log = new Log(this.getClass());</span><br><span class="line"></span><br><span class="line">public static void setDriver(AppiumDriver&lt;?&gt; driver) &#123;</span><br><span class="line">TestNGListener.driver = driver;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onTestSuccess(ITestResult tr) &#123;</span><br><span class="line">log.info(&quot;Test Success&quot;);</span><br><span class="line">super.onTestSuccess(tr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onTestFailure(ITestResult tr) &#123;</span><br><span class="line">log.error(&quot;Test Failure&quot;);</span><br><span class="line">super.onTestFailure(tr);</span><br><span class="line"></span><br><span class="line">ScreenShot screenShot = new ScreenShot(driver);</span><br><span class="line">screenShot.getScreenShot();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onTestSkipped(ITestResult tr) &#123;</span><br><span class="line">log.error(&quot;Test Skipped&quot;);</span><br><span class="line">super.onTestSkipped(tr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onStart(ITestContext testContext) &#123;</span><br><span class="line">log.info(&quot;Test Start&quot;);</span><br><span class="line">super.onStart(testContext);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onFinish(ITestContext testContext) &#123;</span><br><span class="line">log.info(&quot;Test Finish&quot;);</span><br><span class="line">super.onFinish(testContext);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到此基础层的各个核心的类就讲解完成了，你可以把它理解成工具层，就是你需要什么工具，直接通过基础层来调用。当然，在你的实际框架中还可以继续拓展基础层，比如，如果你的数据是存储在数据库中，这时，你就可以封装一个读取数据库，依赖于JDBC的工具类，放在基础层，然后如果其他层需要读取数据库中的数据，就可以直接调用了。</p><p>下一章将讲解 自动化测试框架（四）：对象层</p><p> 最后再贴一下项目源码：<a href="https://github.com/iTestinglab" target="_blank" rel="noopener">https://github.com/iTestinglab</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文为CharliChen原创文章，转载请注明出处！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;第一章我就有说到
      
    
    </summary>
    
      <category term="测试开发" scheme="http://yoursite.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="自动化测试" scheme="http://yoursite.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>UI层自动化测试框架（二）：Appium基础</title>
    <link href="http://yoursite.com/2016/11/24/UI%E5%B1%82%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9AAppium%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2016/11/24/UI层自动化测试框架（二）：Appium基础/</id>
    <published>2016-11-24T03:45:33.000Z</published>
    <updated>2018-05-01T11:47:28.349Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文为CharliChen原创文章，转载请注明出处！！</p></blockquote><p>申明：本章节引用很多第三方资料和网上的教程，在参考资料tab中我都有备注，请理解。<br>由于该框架是基于Appium的，所以先讲讲appium的基础知识</p><h2 id="一：Appium介绍"><a href="#一：Appium介绍" class="headerlink" title="一：Appium介绍"></a>一：Appium介绍</h2><blockquote><p>Appium是由nodejs的express框架写的Http Server。Appium不是它⾃⼰创建⼀套新的测试框架，是将现有的优秀的框架进⾏了集成，以Selenium WebDriver的协议(JsonWireProtocol/Restful web service）统⼀起来. 使得这个框架满⾜多⽅⾯的需求。Appium启动⾃动化测试后，在被测设备上启动⼀个server，监听来⾃Appium server的指令。不同的平台（如IOS，Android）采⽤不同的运⾏和交换⽅式。Appium将某个桩程序“侵入”平台，用于接受指令，来完成测试脚本的运行。</p></blockquote><p>特性：</p><ol><li>跨平台， native hybrid webview(H5) </li><li>跨设备， android iOS </li><li>跨app，可以在多个app之间交互</li><li>不依赖APP开源代码( Android 对H5的支持需要代码支持，这里不细说) </li><li>支持Selenium WebDriver / Selenium Grid </li><li>跨语言， java python ruby nodejs </li><li>Open Source </li></ol><h2 id="二：Appium工作原理"><a href="#二：Appium工作原理" class="headerlink" title="二：Appium工作原理"></a>二：Appium工作原理</h2><h3 id="Android端"><a href="#Android端" class="headerlink" title="Android端"></a>Android端</h3><p>1.原理图：<br><img src="http://img.blog.csdn.net/20160906194112594" alt="这里写图片描述"></p><blockquote><p>在Android端，appium基于WebDriver，并利⽤用Bootstrap.js，最后通过调⽤用UiAutomator的命令，实现App的自动化测试。UiAutomator测试框架是Android SDK⾃自带的App UI自动化测试Java库。另外由于UiAutomator对H5的⽀支持有限，appium引入了chromedriver来实现基于H5的自动化。</p></blockquote><p>2.主要原理：</p><ul><li>左边的WebDriver script是我们的selenium测试脚本</li><li>中间是起的Appium的服务，Appium在这边起了一个Server（4723端口），跟selenium Webdriver测试框架类似，Appium⽀支持标准的WebDriver JSONWireProtocol 。在这里提供了一套web服务，Appium Server接收web driver 标准请求，解析请求内容，调⽤用对应的框架响应操作。如：脚本发送一个点击按钮的请求给appium server</li><li>appium server会把请求转发给中间件Bootstrap.jar ，它是用java写的，安装在手机上.Bootstrap 接收appium 的命令(4724端口)，最终通过调⽤用UiAutomator的命令来实现</li><li>最后执⾏行的结果由Bootstrap返回给appium server</li><li>另外，appium还用到了chromedriver来⽀支持基于H5（webview）的测试</li></ul><h3 id="iOS端"><a href="#iOS端" class="headerlink" title="iOS端"></a>iOS端</h3><p>1.原理图：<br><img src="http://img.blog.csdn.net/20160906194141360" alt="这里写图片描述"></p><blockquote><p>在IOS端，appium同样使⽤用WebDriver的⼀一套协议。与Android端测试框架不同的是，appium ios封装了apple的 Instruments框架，主要用了Instrument里的UI Automation（Apple的⾃自动化测试框架），然后在设备中注⼊入bootstrap.js进⾏行监听。</p></blockquote><p>2.主要原理</p><ul><li>左边的WebDriver script是selenium测试脚本</li><li>中间是起的Appium的服务，Appium在这边起了⼀一个Server（4723端口），跟selenium Webdriver测试框架类似，Appium⽀支持标准的WebDriver JSONWireProtocol 。在这里提供了一套web服务，Appium Server接收web driver 标准请求，解析请求内容，调⽤用对应的框架响应操作。如：脚本发送一个点击按钮的请求给appium server。</li><li>appium server调用instruments.js 启动⼀一个socket server，同时分出⼀一个⼦子进程运⾏行instruments.app，将bootstrap.js（一个UIAutomation脚本）注⼊入到device⽤用于和外界进⾏行交互</li><li>对于H5的操作，运⽤用了 iOS webkit debug proxy来实现<br><a href="http://appium.io/slate/en/v1.0.0/?java#ios-support" target="_blank" rel="noopener">http://appium.io/slate/en/v1.0.0/?java#ios-support</a><br><a href="https://github.com/google/ios-webkit-debug-proxy" target="_blank" rel="noopener">https://github.com/google/ios-webkit-debug-proxy</a></li></ul><h2 id="三：安装Appium"><a href="#三：安装Appium" class="headerlink" title="三：安装Appium"></a>三：安装Appium</h2><p>这一部分，其实网上都有非常详细的教程，这里就不一一阐述<br>主要的步骤为：</p><ul><li>安装JDK并配置环境变量</li><li>安装Android SDK并配置环境变量</li><li>安装Nodejs</li><li>安装appium </li><li>验证安装</li></ul><p>相关资料：<br>Appium for Windows环境搭建：  <a href="http://www.cnblogs.com/tobecrazy/p/4562199.html" target="_blank" rel="noopener">http://www.cnblogs.com/tobecrazy/p/4562199.html</a><br>Appium for iOS 环境建:  <a href="http://www.cnblogs.com/tobecrazy/p/4970188.html" target="_blank" rel="noopener">http://www.cnblogs.com/tobecrazy/p/4970188.html</a></p><h2 id="四：DesiredCapabilities"><a href="#四：DesiredCapabilities" class="headerlink" title="四：DesiredCapabilities"></a>四：DesiredCapabilities</h2><p>DesiredCapabilities携带了一些配置信息，在启动session 时必须提供，如启动模式，apk/app配置，package/activity配置，浏览器配置，键盘配置。从本质讲  是一组 key- value形式的对象 ,你可以理解为java里的json对象。（你可以在selenium-api-2.49.0- sources.jar 查看CapabilityType的声明）</p><p>DesiredCapabilities的重要作用是在启动时传递信息给Appium Server。可以粗略的分为两类：设备信息类和应用信息类 </p><ul><li>设备信息：设备是真机还是模拟器，手机操作系统以及版本等。</li><li>应用信息：要进行浏览器测试还是移动端测试，如果是移动应用，安装apk或者app文件的路径，如果是浏览器测试，浏览器的类型是什么。</li></ul><p>下图列举了DesiredCapabilities常用的关键字：<br> <img src="http://img.blog.csdn.net/20160906201120195" alt="这里写图片描述"> </p><p>Session介绍</p><blockquote><p>Session是指一个在终端用户与交互系统进行通讯的会话，用于保持状态的基于web服务器的方法。将Appium理解为server端，客户端设备发起command的必须是在session start后才可以进行的。一般来说，通过post/session这个url，然后传入DesiredCapabilities就开启session啦。</p></blockquote><p>DesiredCapabilities的使用：</p><p>Android：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">DesiredCapabilities caps = new DesiredCapabilities();</span><br><span class="line">// apk地址，不需要安装的话这行不需要</span><br><span class="line">// File app=new File(&quot;C:\\Users\\charlie.chen\\djigo.apk&quot;);</span><br><span class="line">// 不需要安装的话就去掉这个</span><br><span class="line">// caps.setCapability(&quot;app&quot;, app.getAbsolutePath());</span><br><span class="line"></span><br><span class="line">caps.setCapability(&quot;platformName&quot;, &quot;Android&quot;);</span><br><span class="line">caps.setCapability(&quot;platformVersion&quot;, &quot;6.0&quot;);</span><br><span class="line">caps.setCapability(&quot;deviceName&quot;, &quot;P9&quot;);</span><br><span class="line">caps.setCapability(&quot;udid&quot;, udid);</span><br><span class="line">caps.setCapability(&quot;appPackage&quot;, appPackage);</span><br><span class="line">caps.setCapability(&quot;appActivity&quot;, appActivity);</span><br><span class="line">// caps.setCapability(MobileCapabilityType.BROWSER_NAME, &quot;Chrome&quot;);</span><br><span class="line">caps.setCapability(&quot;unicodeKeyboard&quot;, &quot;True&quot;); // 支持中文输入</span><br><span class="line">caps.setCapability(&quot;resetKeyboard&quot;, &quot;True&quot;); // 重置输入法为系统默认</span><br></pre></td></tr></table></figure><p>iOS:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DesiredCapabilities caps = new DesiredCapabilities();</span><br><span class="line">caps.setCapability(&quot;platformName&quot;, &quot;iOS&quot;);</span><br><span class="line">caps.setCapability(&quot;platformVersion&quot;, &quot;9.3&quot;);</span><br><span class="line">caps.setCapability(&quot;deviceName&quot;, &quot;iPhone 6s&quot;);</span><br><span class="line"></span><br><span class="line">caps.setCapability(&quot;unicodeKeyboard&quot;, &quot;True&quot;);</span><br><span class="line">caps.setCapability(&quot;resetKeyboard&quot;, &quot;True&quot;);</span><br></pre></td></tr></table></figure><h2 id="五：元素的定位"><a href="#五：元素的定位" class="headerlink" title="五：元素的定位"></a>五：元素的定位</h2><blockquote><p>UIAutomatorViewer是Andorid SDK自动的一个app元素查看工具，通过这个工具我们可以查看app view上面的元素的属性，然后再利用Appium各个API对元素进行定位操作。</p></blockquote><p>UIAutomatorViewer使用：</p><ul><li>将测试设备连接电脑，并且将被测app签名后安装在测试机。</li><li>打开安装的SDK文件夹，在sdk/toos下找到uiautomatorviewer.bat，运行<br><img src="http://img.blog.csdn.net/20160906202847953" alt="这里写图片描述"></li></ul><p>如图右下方可以看到定位的元素属性：index，text，id，classname，。。。。</p><p>常见的元素定位的方法：</p><ul><li>通过id定位：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirver.findElement(By.id(&quot;id is me&quot;));</span><br></pre></td></tr></table></figure><ul><li>通过name定位</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirver.findElement(By.name(&quot;name is me&quot;));    //name其实就是text</span><br></pre></td></tr></table></figure><ul><li>通过clssName定位</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirver.findElement(By.className(&quot;className is me&quot;));</span><br></pre></td></tr></table></figure><ul><li>通过xpath定位</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirver.findElement((By.xpath(&quot;//android.widget.TextView[contains(@text,&apos;天空之城&apos;)]&quot;));</span><br></pre></td></tr></table></figure><ul><li>List遍历</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;WebElement&gt; textViewList=driver.findElements(By.id(&quot;id is me&quot;));</span><br><span class="line">textViewList.get(0).sendKeys(&quot;Some Name&quot;);</span><br><span class="line">textViewList.get(1).sendKeys(&quot;some@example.com&quot;);</span><br></pre></td></tr></table></figure><ul><li>通过坐标定位</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TouchAction to = new TouchAction(driver);</span><br><span class="line">try &#123;</span><br><span class="line">to.tap(x, y).release().perform();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六：一个简单的脚本"><a href="#六：一个简单的脚本" class="headerlink" title="六：一个简单的脚本"></a>六：一个简单的脚本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package com.appium.demo;</span><br><span class="line"> </span><br><span class="line">import org.openqa.selenium.By;</span><br><span class="line">import org.openqa.selenium.WebElement;</span><br><span class="line">import org.openqa.selenium.remote.CapabilityType;</span><br><span class="line">import org.openqa.selenium.remote.DesiredCapabilities;</span><br><span class="line">import io.appium.java_client.android.AndroidDriver;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.net.URL;</span><br><span class="line">import java.util.List;</span><br><span class="line"> </span><br><span class="line">public class AppDemo &#123;</span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">private  AndroidDriver  driver;</span><br><span class="line"></span><br><span class="line">        DesiredCapabilities capabilities = new DesiredCapabilities();</span><br><span class="line">        capabilities.setCapability(CapabilityType.BROWSER_NAME, &quot;&quot;);</span><br><span class="line">        capabilities.setCapability(&quot;platformName&quot;, &quot;Android&quot;);</span><br><span class="line">        capabilities.setCapability(&quot;deviceName&quot;,&quot;Android Emulator&quot;);</span><br><span class="line">        capabilities.setCapability(&quot;platformVersion&quot;, &quot;4.4&quot;);</span><br><span class="line">        capabilities.setCapability(&quot;app&quot;, app.getAbsolutePath());</span><br><span class="line">        capabilities.setCapability(&quot;appPackage&quot;, &quot;com.example.demo&quot;);</span><br><span class="line">        capabilities.setCapability(&quot;appActivity&quot;, &quot;.WelcomeAcitvity&quot;);</span><br><span class="line">        driver = new AndroidDriver(new URL(&quot;http://127.0.0.1:4723/wd/hub&quot;), capabilities);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">        WebElement el = driver.findElement(By.name(&quot;Add Contact&quot;));</span><br><span class="line">        el.click();</span><br><span class="line">        List&lt;WebElement&gt; textViewList=driver.findElements(By.id(&quot;id is me&quot;));</span><br><span class="line">textViewList.get(0).sendKeys(&quot;Some Name&quot;);</span><br><span class="line">textViewList.get(1).sendKeys(&quot;some@example.com&quot;);</span><br><span class="line">        driver.findElementByName(&quot;Save&quot;).click();</span><br><span class="line">        </span><br><span class="line">        driver.quit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>appium官网资料：<a href="http://appium.io/slate/cn/1.5/?java#about-appium" target="_blank" rel="noopener">http://appium.io/slate/cn/1.5/?java#about-appium</a><br>appium 官方github：<a href="https://github.com/appium" target="_blank" rel="noopener">https://github.com/appium</a><br>appium工作原理：<a href="http://blog.sina.com.cn/s/blog_60c53af50102v3sb.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_60c53af50102v3sb.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文为CharliChen原创文章，转载请注明出处！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;申明：本章节引用很多第三方资料和网上的教程，在参考资料tab中我都有备注，请理解。&lt;br&gt;由于该框架是基于Appium的，所以先讲讲appium的基础
      
    
    </summary>
    
      <category term="测试开发" scheme="http://yoursite.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="自动化测试" scheme="http://yoursite.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>UI层自动化测试框架（一）-简介和环境搭建</title>
    <link href="http://yoursite.com/2016/11/23/UI%E5%B1%82%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%80%EF%BC%89-%E7%AE%80%E4%BB%8B%E5%92%8C%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2016/11/23/UI层自动化测试框架（一）-简介和环境搭建/</id>
    <published>2016-11-23T05:15:30.000Z</published>
    <updated>2018-05-01T11:45:14.359Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文为CharliChen原创文章，转载请注明出处！！</p></blockquote><p>大家好，本系列教程主要介绍基于Appium的UI层的自动化测试框架的设计和实践。我将平时的学习和工作的实践一一的总结下来，给初学者一点灵<br>感和启发，如有不对的地方还请大家指出。<br>所谓UI层自动化，顾名思义，主要是测试业务层界面层的，关于单元层，接口层的自动化后续再讲，对于测试，我主张的理念就是：分层测试，持<br>续集成。只要大家后续多关注我的blog，会给大家一一呈现！<br>好了，废话不多说，开始进入正题。</p><p>提前规划下该系列目录：<br>自动化测试框架（一）：简介和环境搭建<br>自动化测试框架（二）：Appium基础<br>自动化测试框架（三）：基础层<br>自动化测试框架（四）：对象库层<br>自动化测试框架（五）：操作层和用例层<br>自动化测试框架（六）：持续集成和测试报告</p><p>对应源码地址：<a href="https://github.com/iTestinglab" target="_blank" rel="noopener">https://github.com/iTestinglab</a></p><hr><h2 id="一：简介"><a href="#一：简介" class="headerlink" title="一：简介"></a>一：简介</h2><p>测试框架名：由于该框架是基于Appium，所以我给它取了一个霸气的名称：<strong>AppiumTurbo</strong>  </p><p>测试框架图：<br>我将该框架划分四层，自下向上，各司其责，如图：<br><img src="http://img.blog.csdn.net/20160911182224555" alt="这里写图片描述"></p><p>测试框架要点：</p><ul><li>该框架是基于现在比较流行的第三方开源框架Appium进行二次开发</li><li>通过Maven进行项目和依赖管理</li><li>通过TestNG进行测试脚本的管理</li><li>通过Log4j生成运行日志</li><li>通过AssertJ提供丰富的断言</li><li>通过ReportNG输出丰富多彩的测试报告</li><li>最后将源码托管于Git通过Jenkins实现持续集成</li></ul><p>测试框架的优势：</p><ul><li>该框架支持Android和iOS还有H5页面（这就是Appium的强大之处）</li><li>通过PO模式将代码以页面为单位进行组织，针对这个页面上的所有信息，相关操作都放到一个类中，从而使具体的测试用例变成了简单的调用和验证操作。这样大大提高代码的复用性和可读性。</li><li>采用数据驱动思想，将数据和代码进行有效的分离，提高代码的可维护性。</li><li>支持并行执行多条用例，也就是说可以连接多个设备，同时执行不同用例，提高了执行效率。</li></ul><hr><h2 id="二：环境搭建"><a href="#二：环境搭建" class="headerlink" title="二：环境搭建"></a>二：环境搭建</h2><ul><li>安装JDK , Eclipse ，Andorid SDK，配置环境变量 </li><li><p>安装Appium服务端（建议先安装GUI版本的）<br>由于本人的电脑是iMac，和Windows的不太一样，GUI界面如下<br><img src="http://img.blog.csdn.net/20160906162716406" alt="这里写图片描述"></p><p>点击如图AppiumDoctor ，会出现如下界面，都打勾就证明Appium依赖的环境安装好了<br><img src="http://img.blog.csdn.net/20160906162807657" alt="这里写图片描述"></p></li><li>安装Maven，并在Eclipse中安装m2e插件</li><li>安装配置Jenkins持续集成环境，参考我之前的csdn博文  <a href="http://blog.csdn.net/tobetheender/article/details/52298583" target="_blank" rel="noopener">Jenkins安装和构建部署</a></li></ul><hr><p>以上环境配置，网上都有教程，大家多多去查资料，这里就不详说啦,不会的自行左拐 google，baidu<br>下一章主要讲解Appium的基础知识，敬请期待 ！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文为CharliChen原创文章，转载请注明出处！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大家好，本系列教程主要介绍基于Appium的UI层的自动化测试框架的设计和实践。我将平时的学习和工作的实践一一的总结下来，给初学者一点灵&lt;br&gt;感和启
      
    
    </summary>
    
      <category term="测试开发" scheme="http://yoursite.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="自动化测试" scheme="http://yoursite.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
</feed>
